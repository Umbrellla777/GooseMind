const config = require('../config');
const { MessageGenerator } = require('../services/messageGenerator');

// –£–ø—Ä–æ—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –¥–æ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
const REACTIONS = [
    'üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè',
    'ü§î', 'ü§Ø', 'üò±', 'ü§¨', 'üò¢',
    'üéâ', 'ü§©', 'ü§Æ', 'üí©', 'üôè',
    'üëé', '‚ù§Ô∏è‚Äçüî•', 'ü§®', 'üñï', 
    'üí©', 'üí©', 'üí©'  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –Ω–∞ üí©, –¥–æ–±–∞–≤–ª—è—è –µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
];

class MessageHandler {
    constructor(supabase) {
        this.supabase = supabase;
        this.messageGenerator = new MessageGenerator(supabase);
    }

    async saveMessage(message) {
        return await this.messageGenerator.saveMessage(message);
    }

    async saveMessageDirect(message) {
        return await this.messageGenerator.saveMessageDirect(message);
    }

    parseMessage(text) {
        return text
            .toLowerCase()
            .replace(/[^\w–∞-—è—ë\s]/gi, '')
            .split(/\s+/)
            .filter(word => word.length > 0);
    }

    isBotMentioned(text) {
        const lowerText = text.toLowerCase();
        return config.BOT_NAMES.some(name => 
            lowerText.includes(name.toLowerCase()) ||
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–º–µ–Ω
            (name.toLowerCase() === '–ø–æ–ª—É—É–º–Ω—ã–π –≥—É—Å—å' && 
             lowerText.includes('–ø–æ–ª—É—É–º–Ω—ã–π') && 
             lowerText.includes('–≥—É—Å—å'))
        );
    }

    async clearDatabase() {
        try {
            console.log('–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
            await this.supabase.from('phrases').delete();
            console.log('–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ phrases');
            
            await this.supabase.from('messages').delete();
            console.log('–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ messages');
            
            await this.supabase.from('chat_karma').delete();
            console.log('–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ chat_karma');
            
            // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤
            await this.supabase.from('users').delete();
            console.log('–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ users');
            
            await this.supabase.from('chats').delete();
            console.log('–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ chats');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∫–∞—Ä–º—ã
            if (this.karmaService) {
                this.karmaService.karmaCache.clear();
            }
            
            console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    async analyzeForReaction(message) {
        try {
            if (message.from?.id === message.botInfo?.id) {
                return null;
            }

            if (Math.random() * 100 >= config.REACTION_PROBABILITY) {
                return null;
            }

            return [REACTIONS[Math.floor(Math.random() * REACTIONS.length)]];
        } catch (error) {
            console.error('Error analyzing for reaction:', error);
            return null;
        }
    }

    async checkDatabaseContent(chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            const { data: messages } = await this.supabase
                .from('messages')
                .select('id')
                .eq('chat_id', chatId);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤
            const { data: words } = await this.supabase
                .from('words')
                .select('id');

            const messagesCount = messages?.length || 0;
            const wordsCount = words?.length || 0;

            console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ ${chatId}:`);
            console.log(`- –°–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}`);
            console.log(`- –í—Å–µ–≥–æ —Å–ª–æ–≤: ${wordsCount}`);

            return {
                messages: messagesCount,
                words: wordsCount
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }
}

module.exports = { MessageHandler }; 