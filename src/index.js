const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const { MessageHandler } = require('./handlers/messageHandler');
const { MessageGenerator } = require('./services/messageGenerator');
const config = require('./config');

const bot = new Telegraf(config.BOT_TOKEN);
const supabase = createClient(config.SUPABASE_URL, config.SUPABASE_KEY);

const messageHandler = new MessageHandler(supabase);
const messageGenerator = new MessageGenerator(supabase);

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
let awaitingProbability = false;
let awaitingReactionProbability = false;
let awaitingSwearMultiplier = false;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —á–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
        if (ctx.message?.migrate_to_chat_id) {
            console.log(`Chat ${ctx.chat.id} migrated to ${ctx.message.migrate_to_chat_id}`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—É—Å—è
        if (ctx.message.text === '/gs' || ctx.message.text === '/goosemind') {
            if (ctx.message.from.username.toLowerCase() !== 'umbrellla777') {
                return ctx.reply('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
            }

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚ö°Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞', callback_data: 'set_probability' },
                        { text: 'üòé –ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ–∞–∫—Ü–∏–π', callback_data: 'set_reaction_probability' },
                        { text: 'ü§¨ –ß–∞—Å—Ç–æ—Ç–∞ –º–∞—Ç–æ–≤', callback_data: 'set_swear_multiplier' }
                    ],
                    [
                        { text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å', callback_data: 'clear_db' }
                    ]
                ]
            };

            await ctx.reply(
                `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–æ–ª—É—É–º–Ω–æ–≥–æ –ì—É—Å—è:\n` +
                `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: ${config.RESPONSE_PROBABILITY}\n` +
                `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: ${config.REACTION_PROBABILITY}\n` +
                `–ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–∞—Ç–æ–≤: ${config.SWEAR_MULTIPLIER}`,
                { reply_markup: keyboard }
            );
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if (awaitingProbability && ctx.message.from.username.toLowerCase() === 'umbrellla777') {
            const prob = parseFloat(ctx.message.text);
            if (!isNaN(prob) && prob >= 0.01 && prob <= 1) {
                config.RESPONSE_PROBABILITY = prob;
                await ctx.reply(`‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${prob}`);
                awaitingProbability = false;
                return;
            } else {
                await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.01 –¥–æ 1');
                return;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ü–∏–π
        if (awaitingReactionProbability && ctx.message.from.username.toLowerCase() === 'umbrellla777') {
            const prob = parseFloat(ctx.message.text);
            if (!isNaN(prob) && prob >= 0.01 && prob <= 1) {
                config.REACTION_PROBABILITY = prob;
                await ctx.reply(`‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${prob}`);
                awaitingReactionProbability = false;
                return;
            } else {
                await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.01 –¥–æ 1');
                return;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await messageHandler.saveMessage(ctx.message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        if (messageHandler.isBotMentioned(ctx.message.text)) {
            const response = await messageGenerator.generateResponse(ctx.message);
            await ctx.reply(response);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if (ctx.message.reply_to_message?.from?.id === ctx.botInfo.id) {
            const response = await messageGenerator.generateResponse(ctx.message);
            await ctx.reply(response);
            return;
        }
        
        // –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–µ–∞–∫—Ü–∏–π
        if (Math.random() < config.RESPONSE_PROBABILITY) {
            const response = await messageGenerator.generateResponse(ctx.message);
            await ctx.reply(response);
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
        const reactions = await messageHandler.analyzeForReaction(ctx.message);
        if (reactions) {
            try {
                await ctx.telegram.callApi('setMessageReaction', {
                    chat_id: ctx.message.chat.id,
                    message_id: ctx.message.message_id,
                    reaction: reactions.map(emoji => ({
                        type: 'emoji',
                        emoji: emoji
                    })),
                    is_big: Math.random() < 0.1 // 10% —à–∞–Ω—Å –Ω–∞ –±–æ–ª—å—à—É—é —Ä–µ–∞–∫—Ü–∏—é
                });
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (awaitingSwearMultiplier && ctx.message.from.username.toLowerCase() === 'umbrellla777') {
            const multiplier = parseInt(ctx.message.text);
            if (!isNaN(multiplier) && multiplier >= 0 && multiplier <= 10) {
                config.SWEAR_MULTIPLIER = multiplier;
                const message = multiplier === 0 
                    ? '‚úÖ –ú–∞—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã' 
                    : `‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${multiplier}`;
                await ctx.reply(message);
                awaitingSwearMultiplier = false;
                return;
            } else {
                await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10');
                return;
            }
        }

    } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—é —á–∞—Ç–∞
        if (error.response?.parameters?.migrate_to_chat_id) {
            const newChatId = error.response.parameters.migrate_to_chat_id;
            console.log(`Retrying with new chat ID: ${newChatId}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º ID —á–∞—Ç–∞ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            ctx.chat.id = newChatId;
            return ctx.reply(error.on.payload.text);
        }
        console.error('Error processing message:', error);
        if (ctx.message.from.username === 'Umbrellla777') {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
bot.action('set_probability', async (ctx) => {
    try {
        if (ctx.from.username.toLowerCase() !== 'umbrellla777') {
            return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏');
        }
        
        awaitingProbability = true;
        await ctx.answerCbQuery();
        await ctx.reply(
            'üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 0.01 –¥–æ 1).\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 0.1 - –æ—Ç–≤–µ—Ç –Ω–∞ 10% —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
            '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ' + config.RESPONSE_PROBABILITY
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

bot.action('clear_db', async (ctx) => {
    try {
        if (ctx.from.username.toLowerCase() !== 'umbrellla777') {
            return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏');
        }
        
        await messageHandler.clearDatabase();
        await ctx.answerCbQuery('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
        await ctx.reply('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ü–∏–π
bot.action('set_reaction_probability', async (ctx) => {
    try {
        if (ctx.from.username.toLowerCase() !== 'umbrellla777') {
            return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏');
        }
        
        awaitingReactionProbability = true;
        await ctx.answerCbQuery();
        await ctx.reply(
            'üòé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π (–æ—Ç 0.01 –¥–æ 1).\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 0.15 - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ 15% —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
            '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ' + config.REACTION_PROBABILITY
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ü–∏–π:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è –º–∞—Ç–æ–≤
bot.action('set_swear_multiplier', async (ctx) => {
    try {
        if (ctx.from.username.toLowerCase() !== 'umbrellla777') {
            return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏');
        }
        
        awaitingSwearMultiplier = true;
        await ctx.answerCbQuery();
        await ctx.reply(
            'ü§¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –º–∞—Ç–æ–≤ (–æ—Ç 0 –¥–æ 10).\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 3 - –º–∞—Ç—ã –±—É–¥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ 3 —Ä–∞–∑–∞ —á–∞—â–µ\n' +
            '0 - –º–∞—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã\n' +
            '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ' + config.SWEAR_MULTIPLIER
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –º–∞—Ç–æ–≤:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ Telegraf:', err);
    if (ctx.from?.username === 'Umbrellla777') {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: ' + err.message);
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    console.log('–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:', config.RESPONSE_PROBABILITY);
}).catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
});

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 