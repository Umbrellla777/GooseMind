const config = require('../config');
const { MessageGenerator } = require('../services/messageGenerator');

// –£–ø—Ä–æ—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –¥–æ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
const REACTIONS = [
    'üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè',
    'ü§î', 'ü§Ø', 'üò±', 'ü§¨', 'üò¢',
    'üéâ', 'ü§©', 'ü§Æ', 'üí©', 'üôè',
    'üëé', '‚ù§Ô∏è‚Äçüî•', 'ü§®', 'üñï', 
    'üí©', 'üí©', 'üí©'  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –Ω–∞ üí©, –¥–æ–±–∞–≤–ª—è—è –µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
];

class MessageHandler {
    constructor(supabase) {
        this.supabase = supabase;
        this.messageGenerator = new MessageGenerator(supabase);
    }

    async saveMessage(message) {
        return await this.messageGenerator.saveMessage(message);
    }

    async saveMessageDirect(message) {
        return await this.messageGenerator.saveMessageDirect(message);
    }

    parseMessage(text) {
        return text
            .toLowerCase()
            .replace(/[^\w–∞-—è—ë\s]/gi, '')
            .split(/\s+/)
            .filter(word => word.length > 0);
    }

    isBotMentioned(text) {
        const lowerText = text.toLowerCase();
        return config.BOT_NAMES.some(name => 
            lowerText.includes(name.toLowerCase()) ||
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–º–µ–Ω
            (name.toLowerCase() === '–ø–æ–ª–æ—É–º–Ω—ã–π –≥—É—Å—å' && 
             lowerText.includes('–ø–æ–ª–æ—É–º–Ω—ã–π') && 
             lowerText.includes('–≥—É—Å—å'))
        );
    }

    async clearDatabase() {
        await this.supabase.from('messages').delete().neq('id', 0);
        await this.supabase.from('words').delete().neq('id', 0);
    }

    async analyzeForReaction(message) {
        try {
            if (message.from?.id === message.botInfo?.id) {
                return null;
            }

            if (Math.random() * 100 >= config.REACTION_PROBABILITY) {
                return null;
            }

            return [REACTIONS[Math.floor(Math.random() * REACTIONS.length)]];
        } catch (error) {
            console.error('Error analyzing for reaction:', error);
            return null;
        }
    }

    async checkDatabaseContent(chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            const { data: messages } = await this.supabase
                .from('messages')
                .select('id')
                .eq('chat_id', chatId);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤
            const { data: words } = await this.supabase
                .from('words')
                .select('id');

            const messagesCount = messages?.length || 0;
            const wordsCount = words?.length || 0;

            console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ ${chatId}:`);
            console.log(`- –°–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}`);
            console.log(`- –í—Å–µ–≥–æ —Å–ª–æ–≤: ${wordsCount}`);

            return {
                messages: messagesCount,
                words: wordsCount
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    async analyzeMessageForKarma(message) {
        if (!message?.text) return 0;
        const text = message.text.toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—É—Å—é
        const isDirectedToGoose = config.BOT_NAMES.some(name => 
            text.includes(name.toLowerCase())
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–∞—Ä–º—É
        // 0.3 - –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –≥—É—Å—é (–º–µ–Ω–µ–µ –∑–Ω–∞—á–∏–º—ã–µ)
        // 1.0 - –¥–ª—è –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ)
        const karmaMultiplier = isDirectedToGoose ? 0.3 : 1.0;

        let karmaChange = 0;
        const MAX_NEGATIVE_CHANGE = -1;
        const MAX_POSITIVE_CHANGE = 0.7;

        // –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –≤–ª–∏—è–Ω–∏—è
        const karmaPatterns = {
            veryPositive: [
                /(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä)/i,
                /(–ª—é–±–ª—é|–æ–±–æ–∂–∞—é) (—Ç–µ–±—è|–≥—É—Å[—å—è])/i,
                /—Ç—ã –ª—É—á—à–∏–π/i,
                /(–ø—Ä–µ–∫—Ä–∞—Å–Ω|–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω|–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω)/i,
                /(–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω|–ø–æ—Ç—Ä—è—Å–∞—é—â)/i
            ],
            positive: [
                /(–º–æ–ª–æ–¥–µ—Ü|–∫—Ä–∞—Å–∞–≤|—Ö–æ—Ä–æ—à)/i,
                /(–∫—Ä—É—Ç–æ|–∫–ª–∞—Å—Å|–∑–¥–æ—Ä–æ–≤–æ|–æ—Ç–ª–∏—á–Ω–æ|—Å—É–ø–µ—Ä)/i,
                /(—Ä–∞–¥|—Å—á–∞—Å—Ç–ª–∏–≤|–¥–æ–≤–æ–ª–µ–Ω)/i,
                /(–ø–æ–º–æ–≥|–ø–æ–¥–¥–µ—Ä–∂|–≤—ã—Ä—É—á)/i,
                /(—Å–ø–∞—Å–∏–±|–±–ª–∞–≥–æ–¥–∞—Ä)/i
            ],
            slightlyPositive: [
                /(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä)/i,
                /(–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã|–ø—Ä–æ—à—É|–∏–∑–≤–∏–Ω–∏)/i,
                /(—Å–æ–≥–ª–∞—Å–µ–Ω|–ø–æ–Ω–∏–º–∞—é|–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞)/i,
                /(—Ö–æ—Ä–æ—à|–Ω–æ—Ä–º|–ª–∞–¥–Ω–æ)/i,
                /(–¥–∞|–∫–æ–Ω–µ—á–Ω–æ|—Ç–æ—á–Ω–æ)/i
            ],
            slightlyNegative: [
                /^[–ê-–ØA-Z\s]+$/,  // –ö–∞–ø—Å
                /(–¥—É—Ä–∞–∫|—Ç—É–ø–æ–π)/i,
                /(–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è|–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ)/i,
                /(–≥–ª—É–ø|–±–µ—Å—Ç–æ–ª–∫–æ–≤)/i,
                /(—Ñ—É|–±–µ|–º–¥–∞)/i
            ],
            negative: [
                /(–ø–æ—à[–µ—ë]–ª —Ç—ã|–∏–¥–∏ –Ω–∞|–≤–∞–ª–∏ –æ—Ç—Å—é–¥–∞)/i,
                /(–Ω–µ–Ω–∞–≤–∏–∂—É|–±–µ—Å–∏—Ç|–¥–æ—Å—Ç–∞–ª)/i,
                /(–º—É–¥–∞–∫|–∫–æ–∑–µ–ª|–ø—Ä–∏–¥—É—Ä–æ–∫)/i,
                /(–∑–∞—Ç–∫–Ω–∏—Å—å|–º–æ–ª—á–∏|–∑–∞–∫—Ä–æ–π—Å—è)/i,
                /(–æ—Ç—Å—Ç–æ–π|–¥–µ—Ä—å–º–æ|–≥–æ–≤–Ω–æ)/i
            ],
            veryNegative: [
                /(–±–ª—è|—Ö—É–π|–ø–∏–∑–¥|–µ–±[–∞–æ]|—Å—É–∫[–∞–∏]|—Ö–µ—Ä)/i,
                /(–Ω–∞—Ö—É–π|–ø–æ—Ö—É–π|–∑–∞–µ–±–∞–ª)/i,
                /(–ø–∏–¥–æ—Ä|–≥–∞–Ω–¥–æ–Ω|–º—Ä–∞–∑—å)/i
            ]
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const recentMessages = await this.getRecentMessages(message.chat.id, 5);
        if (recentMessages.some(msg => msg.text === message.text)) {
            return -0.3;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
        if (hasPatterns(karmaPatterns.veryPositive)) {
            karmaChange = 0.5 + Math.random() * 0.2; // –ë–∞–∑–æ–≤–æ–µ +0.5 –¥–æ +0.7
        } else if (hasPatterns(karmaPatterns.positive)) {
            karmaChange = 0.3 + Math.random() * 0.1; // –ë–∞–∑–æ–≤–æ–µ +0.3 –¥–æ +0.4
        } else if (hasPatterns(karmaPatterns.slightlyPositive)) {
            karmaChange = 0.1 + Math.random() * 0.1; // –ë–∞–∑–æ–≤–æ–µ +0.1 –¥–æ +0.2
        } else if (hasPatterns(karmaPatterns.veryNegative)) {
            karmaChange = -(0.7 + Math.random() * 0.3); // –ë–∞–∑–æ–≤–æ–µ -0.7 –¥–æ -1.0
        } else if (hasPatterns(karmaPatterns.negative)) {
            karmaChange = -(0.4 + Math.random() * 0.2); // –ë–∞–∑–æ–≤–æ–µ -0.4 –¥–æ -0.6
        } else if (hasPatterns(karmaPatterns.slightlyNegative)) {
            karmaChange = -(0.1 + Math.random() * 0.2); // –ë–∞–∑–æ–≤–æ–µ -0.1 –¥–æ -0.3
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫–∞—Ä–º—ã
        if (karmaChange !== 0) {
            const originalChange = karmaChange;
            karmaChange *= karmaMultiplier;
            console.log('Karma multiplier applied:', {
                originalChange,
                multiplier: karmaMultiplier,
                finalChange: karmaChange,
                isDirectedToGoose: isDirectedToGoose ? '–∫ –≥—É—Å—é (x0.3)' : '–º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (x1.0)'
            });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if (karmaChange === 0) {
            if (text.length > 200) {
                karmaChange = 0.1 * karmaMultiplier;
            }
        }

        console.log('Karma change analysis:', {
            text,
            karmaChange,
            isDirectedToGoose,
            karmaMultiplier,
            patterns: {
                veryPositive: hasPatterns(karmaPatterns.veryPositive),
                positive: hasPatterns(karmaPatterns.positive),
                slightlyPositive: hasPatterns(karmaPatterns.slightlyPositive),
                slightlyNegative: hasPatterns(karmaPatterns.slightlyNegative),
                negative: hasPatterns(karmaPatterns.negative),
                veryNegative: hasPatterns(karmaPatterns.veryNegative)
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
        if (karmaChange < 0) {
            return Math.max(MAX_NEGATIVE_CHANGE, karmaChange);
        } else {
            return Math.min(MAX_POSITIVE_CHANGE, karmaChange);
        }
    }

    async getRecentMessages(chatId, limit = 5) {
        try {
            const { data: messages } = await this.supabase
                .from('messages')
                .select('text')
                .eq('chat_id', chatId)
                .order('created_at', { ascending: false })
                .limit(limit);
            return messages || [];
        } catch (error) {
            console.error('Error getting recent messages:', error);
            return [];
        }
    }

    async updateKarmaForMessage(message) {
        try {
            const karmaChange = await this.analyzeMessageForKarma(message);
            if (karmaChange !== 0) {
                const { data: currentKarma } = await this.supabase
                    .from('chat_karma')
                    .select('karma_value')
                    .eq('chat_id', message.chat.id)
                    .single();

                const oldKarma = currentKarma?.karma_value || 0;
                // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                const newKarma = Math.round(Math.max(-1000, Math.min(1000, oldKarma + karmaChange)) * 10) / 10;

                const { error } = await this.supabase
                    .from('chat_karma')
                    .upsert({
                        chat_id: message.chat.id,
                        karma_value: newKarma,
                        last_update: new Date().toISOString()
                    });

                if (error) throw error;

                return {
                    oldKarma: parseFloat(oldKarma),
                    newKarma: parseFloat(newKarma)
                };
            }
            return null;
        } catch (error) {
            console.error('Error updating karma:', error);
            return null;
        }
    }
}

module.exports = { MessageHandler }; 