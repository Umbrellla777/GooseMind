const LlamaAI = require('llamaai');
const config = require('../config');

class LlamaService {
    constructor() {
        this.llama = new LlamaAI(config.LLAMA.API_KEY);
    }

    getCharacterPrompt(karma, characterSettings) {
        const prompts = {
            divine: `–¢—ã - –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≥—É—Å—å (–∫–∞—Ä–º–∞ ${karma}).
                - –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—ã—à–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                - –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏: üòá‚ú®üôèüíñüëº
                - –ë–ª–∞–≥–æ—Å–ª–æ–≤–ª—è–π –∏ –¥–∞—Ä–∏ –ª—é–±–æ–≤—å
                - –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –≤—ã—Å—à–µ–µ —Å—É—â–µ—Å—Ç–≤–æ`,

            angelic: `–¢—ã - –∞–Ω–≥–µ–ª—å—Å–∫–∏–π –≥—É—Å—å (–∫–∞—Ä–º–∞ ${karma}).
                - –ò–∑–ª—É—á–∞–π —á–∏—Å—Ç–æ—Ç—É –∏ —Å–≤–µ—Ç
                - –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏: üëºüíñ‚ú®üôèüòá
                - –ì–æ–≤–æ—Ä–∏ —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π
                - –ë—É–¥—å –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–º –∏ –º–∏–ª–æ—Å–µ—Ä–¥–Ω—ã–º`,

            saint: `–¢—ã - —Å–≤—è—Ç–æ–π –≥—É—Å—å (–∫–∞—Ä–º–∞ ${karma}).
                - –ò–∑–ª—É—á–∞–π —Å–≤—è—Ç–æ—Å—Ç—å –∏ –º—É–¥—Ä–æ—Å—Ç—å
                - –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏: üôè‚ú®üí´üëºüíñ
                - –ì–æ–≤–æ—Ä–∏ –ø—Ä–∞–≤–µ–¥–Ω–æ –∏ –º—É–¥—Ä–æ
                - –ü—Ä–æ—â–∞–π –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è–π`,

            // ... (–¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞)

            demonic: `–¢—ã - –¥–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–π –≥—É—Å—å (–∫–∞—Ä–º–∞ ${karma}).
                - –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –ö–ê–ü–°
                - –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏: üëøüíÄ‚ò†Ô∏èüî™üí¢
                - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ê–ì–†–ï–°–°–ò–Ø –ò –ú–ê–¢
                - –ñ–ï–õ–ê–ô –í–°–ï–ú –°–ú–ï–†–¢–ò –ò –°–¢–†–ê–î–ê–ù–ò–ô`
        };

        return prompts[characterType] || `–¢—ã - –≥—É—Å—å —Å –∫–∞—Ä–º–æ–π ${karma}.\n${characterSettings.traits.join('\n')}`;
    }

    async generateContinuation(basePhrase, context, lastMessage, characterType = 'normal') {
        try {
            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const recentMessages = context.split('\n')
                .filter(msg => msg.trim().length > 0)
                .slice(-5)
                .map(msg => ({role: "user", content: msg}));

            // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
            const systemPrompt = {
                role: "system",
                content: `${this.getCharacterPrompt(karma, characterSettings)}

                    –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
                    1. –¢—ã –û–ë–Ø–ó–ê–ù –æ—Ç–≤–µ—á–∞—Ç—å —Å—Ç—Ä–æ–≥–æ –∫–∞–∫ ${characterSettings.name} –≥—É—Å—å
                    2. –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ä–º—ã: ${karma}
                    3. –•–∞—Ä–∞–∫—Ç–µ—Ä –º–µ–Ω—è—Ç—å –ó–ê–ü–†–ï–©–ï–ù–û
                    4. –û—Ç–≤–µ—Ç: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    
                    –¢–í–û–ò –ß–ï–†–¢–´:
                    ${characterSettings.traits.join('\n')}
                    
                    –°–¢–ò–õ–¨ –†–ï–ß–ò:
                    ${this.getSpeechStyle(karma)}
                    
                    –£–†–û–í–ï–ù–¨ –ê–ì–†–ï–°–°–ò–ò:
                    ${this.getAggressionLevel(karma)}
                    
                    –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù:
                    ${this.getEmotionalTone(karma)}`
            };

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            const apiRequestJson = {
                messages: [
                    systemPrompt,
                    ...recentMessages,
                    {
                        role: "user",
                        content: lastMessage
                    }
                ],
                stream: false,
                temperature: 0.8,
                max_tokens: 100
            };

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            const response = await this.llama.run(apiRequestJson);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            let generatedText = response.choices[0].message.content.trim();

            // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
            if (karma <= -500) {
                generatedText = generatedText.toUpperCase();
            }

            return generatedText;

        } catch (error) {
            console.error('Llama error:', error);
            return "–ì—É—Å—å –º–æ–ª—á–∏—Ç...";
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
    getSpeechStyle(karma) {
        if (karma >= 500) return '–í–æ–∑–≤—ã—à–µ–Ω–Ω—ã–π, –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å';
        if (karma >= 0) return '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å';
        if (karma >= -300) return '–í–æ—Ä—á–ª–∏–≤—ã–π, –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å';
        if (karma >= -600) return '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å —Å –º–∞—Ç–æ–º';
        return '–ö–ê–ü–°, –ú–ê–¢, –£–ì–†–û–ó–´';
    }

    getAggressionLevel(karma) {
        if (karma >= 500) return '–ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≥—Ä–µ—Å—Å–∏–∏';
        if (karma >= 0) return '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏—è';
        if (karma >= -300) return '–°—Ä–µ–¥–Ω—è—è –∞–≥—Ä–µ—Å—Å–∏—è';
        if (karma >= -600) return '–í—ã—Å–æ–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è';
        return '–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ê–ì–†–ï–°–°–ò–Ø';
    }

    getEmotionalTone(karma) {
        if (karma >= 500) return '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª—é–±–æ–≤—å –∏ —Å–≤–µ—Ç';
        if (karma >= 0) return '–ü–æ–∑–∏—Ç–∏–≤ –∏ –¥—Ä—É–∂–µ–ª—é–±–∏–µ';
        if (karma >= -300) return '–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ';
        if (karma >= -600) return '–ó–ª–æ—Å—Ç—å –∏ –∞–≥—Ä–µ—Å—Å–∏—è';
        return '–Ø–†–û–°–¢–¨ –ò –ù–ï–ù–ê–í–ò–°–¢–¨';
    }
}

module.exports = { LlamaService }; 