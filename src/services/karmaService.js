const config = require('../config');

class KarmaService {
    constructor(supabase) {
        this.supabase = supabase;
        this.karmaCache = new Map(); // chatId -> karma
    }

    async initKarma(chatId) {
        if (!this.karmaCache.has(chatId)) {
            const { data } = await this.supabase
                .from('chat_karma')
                .select('karma')
                .eq('chat_id', chatId)
                .single();

            const karma = data ? data.karma : config.KARMA.DEFAULT;
            this.karmaCache.set(chatId, karma);
            return karma;
        }
        return this.karmaCache.get(chatId);
    }

    async updateKarma(chatId, message, ctx) {
        let karma = await this.initKarma(chatId);
        const oldKarma = karma;
        
        const karmaChange = await this.analyzeMessage(message);
        karma = Math.max(config.KARMA.MIN, Math.min(config.KARMA.MAX, karma + karmaChange));
        
        await this.supabase
            .from('chat_karma')
            .upsert({ chat_id: chatId, karma: karma });
        
        this.karmaCache.set(chatId, karma);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ç–µ–Ω
        const oldHundreds = Math.floor(oldKarma / 100);
        const newHundreds = Math.floor(karma / 100);
        
        if (oldHundreds !== newHundreds) {
            const change = karma > oldKarma ? '–ø–æ–≤—ã—Å–∏–ª–∞—Å—å' : '–ø–æ–Ω–∏–∑–∏–ª–∞—Å—å';
            await ctx.reply(
                `üîÑ –ö–∞—Ä–º–∞ —á–∞—Ç–∞ ${change} –¥–æ ${karma}!\n` +
                this.getKarmaDescription(karma)
            );
        }

        return karma;
    }

    getCharacterType(karma) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ç–æ—á–Ω–æ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º, –æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É
        if (karma >= 900) return 'divine';      // –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π (900 –¥–æ 1000)
        if (karma >= 800) return 'angelic';     // –ê–Ω–≥–µ–ª—å—Å–∫–∏–π (800 –¥–æ 900)
        if (karma >= 700) return 'saint';       // –°–≤—è—Ç–æ–π (700 –¥–æ 800)
        if (karma >= 600) return 'blessed';     // –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω—ã–π (600 –¥–æ 700)
        if (karma >= 500) return 'enlightened'; // –ü—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–Ω—ã–π (500 –¥–æ 600)
        if (karma >= 400) return 'cheerful';    // –í–µ—Å–µ–ª—å—á–∞–∫ (400 –¥–æ 500)
        if (karma >= 300) return 'friendly';    // –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π (300 –¥–æ 400)
        if (karma >= 200) return 'peaceful';    // –ú–∏—Ä–æ–ª—é–±–∏–≤—ã–π (200 –¥–æ 300)
        if (karma >= 100) return 'positive';    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π (100 –¥–æ 200)
        if (karma >= 0) return 'normal';        // –û–±—ã—á–Ω—ã–π (0 –¥–æ 100)
        if (karma >= -100) return 'grumpy';     // –í–æ—Ä—á–ª–∏–≤—ã–π (-100 –¥–æ 0)
        if (karma >= -200) return 'sarcastic';  // –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π (-200 –¥–æ -100)
        if (karma >= -300) return 'annoyed';    // –†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π (-300 –¥–æ -200)
        if (karma >= -400) return 'irritated';  // –ù–µ—Ä–≤–Ω—ã–π (-400 –¥–æ -300)
        if (karma >= -500) return 'angry';      // –ó–ª–æ–π (-500 –¥–æ -400)
        if (karma >= -600) return 'aggressive'; // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π (-600 –¥–æ -500)
        if (karma >= -700) return 'furious';    // –í —è—Ä–æ—Å—Ç–∏ (-700 –¥–æ -600)
        if (karma >= -800) return 'hostile';    // –í—Ä–∞–∂–¥–µ–±–Ω—ã–π (-800 –¥–æ -700)
        if (karma >= -900) return 'cruel';      // –ñ–µ—Å—Ç–æ–∫–∏–π (-900 –¥–æ -800)
        if (karma >= -1000) return 'demonic';   // –î–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–π (-1000 –¥–æ -900)
        return 'infernal';                      // –ò–Ω—Ñ–µ—Ä–Ω–∞–ª—å–Ω—ã–π (< -1000)
    }

    getKarmaDescription(karma) {
        const type = this.getCharacterType(karma);
        const descriptions = {
            divine: 'üòá –ì—É—Å—å –¥–æ—Å—Ç–∏–≥ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è (900 –¥–æ 1000)',
            angelic: 'üëº –ì—É—Å—å —Å—Ç–∞–ª –∞–Ω–≥–µ–ª—å—Å–∫–∏ —á–∏—Å—Ç—ã–º (800 –¥–æ 900)',
            saint: 'üôè –ì—É—Å—å –æ–±—Ä–µ–ª —Å–≤—è—Ç–æ—Å—Ç—å (700 –¥–æ 800)',
            blessed: '‚ú® –ì—É—Å—å –±–ª–∞–≥–æ—Å–ª–æ–≤–ª–µ–Ω (600 –¥–æ 700)',
            enlightened: 'üßò‚Äç‚ôÇÔ∏è –ì—É—Å—å –¥–æ—Å—Ç–∏–≥ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è (500 –¥–æ 600)',
            cheerful: 'ÔøΩÔøΩ –ì—É—Å—å –∏–∑–ª—É—á–∞–µ—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ –≤–µ—Å–µ–ª—å–µ (400 –¥–æ 500)',
            friendly: 'ü§ó –ì—É—Å—å –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–µ–Ω (300 –¥–æ 400)',
            peaceful: '‚òÆÔ∏è –ì—É—Å—å –º–∏—Ä–æ–ª—é–±–∏–≤ –∏ —Å–ø–æ–∫–æ–µ–Ω (200 –¥–æ 300)',
            positive: 'üòå –ì—É—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–∑–∏—Ç–∏–≤–Ω–æ (100 –¥–æ 200)',
            normal: 'üòâ –ì—É—Å—å –≤ –æ–±—ã—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ (0 –¥–æ 100)',
            grumpy: 'üòí –ì—É—Å—å –≤–æ—Ä—á–∏—Ç –∏ –±—É—Ä—á–∏—Ç (-100 –¥–æ 0)',
            sarcastic: 'ÔøΩÔøΩ –ì—É—Å—å —Å—Ç–∞–ª —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º (-200 –¥–æ -100)',
            annoyed: 'üò§ –ì—É—Å—å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω (-300 –¥–æ -200)',
            irritated: 'ÔøΩÔøΩ –ì—É—Å—å –Ω–∞ –Ω–µ—Ä–≤–∞—Ö (-400 –¥–æ -300)',
            angry: 'üò° –ì—É—Å—å –∑–ª–∏—Ç—Å—è (-500 –¥–æ -400)',
            aggressive: 'ü§¨ –ì—É—Å—å —Å—Ç–∞–ª –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º (-600 –¥–æ -500)',
            furious: 'üí¢ –ì—É—Å—å –≤ —è—Ä–æ—Å—Ç–∏ (-700 –¥–æ -600)',
            hostile: 'üëø –ì—É—Å—å –≤—Ä–∞–∂–¥–µ–±–µ–Ω (-800 –¥–æ -700)',
            cruel: 'ÔøΩÔøΩ –ì—É—Å—å —Å—Ç–∞–ª –∂–µ—Å—Ç–æ–∫–∏–º (-900 –¥–æ -800)',
            demonic: 'üëπ –ì—É—Å—å –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –¥–µ–º–æ–Ω–∞ (-1000 –¥–æ -900)',
            infernal: 'üî• –ì—É—Å—å –¥–æ—Å—Ç–∏–≥ –ø–∏–∫–∞ –∑–ª–∞ (< -1000)'
        };
        return descriptions[type] || 'ü§î –ì—É—Å—å –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏';
    }

    async analyzeMessage(message) {
        let karmaChange = 0;
        const text = message.text.toLowerCase();
        const weights = config.KARMA.WEIGHTS;

        // –ê–Ω–∞–ª–∏–∑ –º–∞—Ç–æ–≤ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π
        const swearWords = ['–±–ª—è—Ç—å', '—Å—É–∫–∞', '—Ö—É–π', '–ø–∏–∑–¥–∞', '–µ–±–∞—Ç—å', '–Ω–∞—Ö—É–π'];
        const insultWords = ['—Ç—É–ø–æ–π', '–¥–µ–±–∏–ª', '–º—É–¥–∞–∫', '–∏–¥–∏–æ—Ç', '–ø—Ä–∏–¥—É—Ä–æ–∫', '–¥–∞—É–Ω'];
        const toxicWords = ['–∑–∞—Ç–∫–Ω–∏—Å—å', '–æ—Ç–≤–∞–ª–∏', '–æ—Ç—ä–µ–±–∏—Å—å', '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π', '–∏–¥–∏ –Ω–∞—Ö–µ—Ä'];
        
        // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
        const positiveWords = ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–ø–æ–º–æ–≥—É', '—Ä–∞–¥', '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ'];
        const helpfulWords = ['–¥–∞–≤–∞–π –ø–æ–º–æ–≥—É', '–º–æ–≥—É –ø–æ–º–æ—á—å', '–ø–æ–¥—Å–∫–∞–∂—É', '–Ω–∞—É—á—É', '–æ–±—ä—è—Å–Ω—é'];
        const friendlyWords = ['–¥—Ä—É–≥', '–±—Ä–∞—Ç–∞–Ω', '–ø—Ä–∏—è—Ç–µ–ª—å', '–¥—Ä—É–∂–∏—â–µ', '—Ç–æ–≤–∞—Ä–∏—â'];

        // –ü–æ–¥—Å—á–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤
        let swearCount = swearWords.filter(word => text.includes(word)).length;
        let insultCount = insultWords.filter(word => text.includes(word)).length;
        let toxicCount = toxicWords.filter(word => text.includes(word)).length;

        // –ü–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤
        let positiveCount = positiveWords.filter(word => text.includes(word)).length;
        let helpfulCount = helpfulWords.filter(phrase => text.includes(phrase)).length;
        let friendlyCount = friendlyWords.filter(word => text.includes(word)).length;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —à–∞–≥–∞–º–∏
        karmaChange += swearCount * -3;      // -3 –∑–∞ –∫–∞–∂–¥—ã–π –º–∞—Ç
        karmaChange += insultCount * -5;     // -5 –∑–∞ –∫–∞–∂–¥–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ
        karmaChange += toxicCount * -7;      // -7 –∑–∞ –∫–∞–∂–¥—É—é —Ç–æ–∫—Å–∏—á–Ω—É—é —Ñ—Ä–∞–∑—É
        karmaChange += positiveCount * 2;    // +2 –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ
        karmaChange += helpfulCount * 4;     // +4 –∑–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
        karmaChange += friendlyCount * 3;    // +3 –∑–∞ –∫–∞–∂–¥–æ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏
        const positiveEmoji = ['‚ù§Ô∏è', 'üëç', 'üòä', 'üôè', 'ü§ó', 'üòÑ', 'ü•∞', 'üòé', 'üëè'];
        const negativeEmoji = ['üëé', 'üí©', 'üñï', 'üò°', 'ü§¨', 'üò§', 'ÔøΩÔøΩ', 'ü§Æ'];
        
        if (message.entities) {
            const emojiEntities = message.entities.filter(e => e.type === 'emoji');
            const positiveEmojiCount = emojiEntities.filter(e => positiveEmoji.includes(e.emoji)).length;
            const negativeEmojiCount = emojiEntities.filter(e => negativeEmoji.includes(e.emoji)).length;
            
            karmaChange += positiveEmojiCount * 1;  // +1 –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —ç–º–æ–¥–∑–∏
            karmaChange += negativeEmojiCount * -1; // -1 –∑–∞ –∫–∞–∂–¥—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —ç–º–æ–¥–∑–∏
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–ê–ü–°
        if (message.text === message.text.toUpperCase() && message.text.length > 10) {
            karmaChange -= 2; // -2 –∑–∞ –∫–∞–ø—Å
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º
        if (message.text.length > 200 || /(.)\1{4,}/.test(message.text)) {
            karmaChange -= 3; // -3 –∑–∞ —Å–ø–∞–º
        }

        return karmaChange;
    }

    async setKarma(chatId, karma) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        karma = Math.max(config.KARMA.MIN, Math.min(config.KARMA.MAX, karma));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä–º—É
        await this.supabase
            .from('chat_karma')
            .upsert({ chat_id: chatId, karma: karma });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        this.karmaCache.set(chatId, karma);
        
        return karma;
    }
}

module.exports = { KarmaService }; 