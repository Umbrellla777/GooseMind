const { Telegraf, session } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const { MessageHandler } = require('./handlers/messageHandler');
const { MessageGenerator } = require('./services/messageGenerator');
const config = require('./config');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞
const botOptions = {
    telegram: {
        apiRoot: 'https://api.telegram.org',
        apiTimeout: 30000,
        webhookReply: false
    },
    handlerTimeout: 30000
};

const bot = new Telegraf(config.BOT_TOKEN, botOptions);
const supabase = createClient(config.SUPABASE_URL, config.SUPABASE_KEY);
const messageHandler = new MessageHandler(supabase);
const messageGenerator = new MessageGenerator(supabase);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
const botMessages = new Map();
const MESSAGE_LIMIT = 100;
const MESSAGE_TTL = 24 * 60 * 60 * 1000;

// –ö—ç—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏
const POOP_REACTION_RESPONSES = [
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª ‚Äî —ç—Ç–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Å–∞–º—ã–π —è—Ä–∫–∏–π —Å–ª–µ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –æ—Å—Ç–∞–≤–∏—à—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.",
    "@user, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π —Å–ø–æ—Å–æ–± –≤—ã—Ä–∞–∑–∏—Ç—å —Å–µ–±—è, –Ω–æ, –º–æ–∂–µ—Ç, —Ç–≤–æ–π —Å–ø–æ—Å–æ–± –Ω–µ–º–Ω–æ–≥–æ... —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω?",
    "@user, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–∞–∫—É—é... —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!",
    "@user, —Ç–≤–æ—è –∫–∞–∫–∞—Ö–∞ —ç—Ç–æ –∫–∞–∫ –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–µ–±—è, –Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –≤—Å–µ–≥–¥–∞.",
    "@user, —Ç—ã —Ç–∞–∫ —â–µ–¥—Ä–æ —Ä–∞–∑–±—Ä–∞—Å—ã–≤–∞–µ—à—å—Å—è –∫–∞–∫–∞—Ö–∞–º–∏, –º–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
    "@user, —è —Ü–µ–Ω—é —Ç–≤–æ–π –≤–∫–ª–∞–¥ –≤ —É–¥–æ–±—Ä–µ–Ω–∏–µ —á–∞—Ç–∞!",
    "@user, —Ç–≤–æ—è –∫–∞–∫–∞—Ö–∞ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –º—É–∑–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä... –∫—Ö–º... —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è.",
    "@user, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞–∫–∞—Ö—É, –Ω–æ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –±–æ–ª–µ–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ–±—â–µ–Ω–∏—è.",
    "@user, –∫–∞–∂–¥–∞—è —Ç–≤–æ—è –∫–∞–∫–∞—Ö–∞ - —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–∏–π —à–µ–¥–µ–≤—Ä... –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞.",
    "@user, —è –ø–æ–ª—å—â–µ–Ω —Ç–≤–æ–∏–º... —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ–º.",
    "@user, –Ω–∞–¥–µ—é—Å—å, —Ç–µ–±–µ —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ –ø–æ—Å–ª–µ —ç—Ç–æ–π –∫–∞–∫–∞—Ö–∏?",
    "@user, –∫–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∫–∞–∫–∞—Ö–∞... –†–∞—Å—Å–∫–∞–∂–µ—à—å –∏—Å—Ç–æ—Ä–∏—é –µ—ë –ø–æ—è–≤–ª–µ–Ω–∏—è?",
    "@user, —Ç–≤–æ—è –∫–∞–∫–∞—Ö–∞ –±—É–¥–µ—Ç –±–µ—Ä–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –º–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ–æ—Ä–¥–∏–Ω–∞—Ä–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π.",
    "@user, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞–∫–∞—Ö—É, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞?",
    "@user, —è –≤–∏–∂—É, —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Ü–µ–Ω–∏—Ç–µ–ª—å –∫–∞–∫–∞—Ö!"
];

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function cleanupOldMessages() {
    const now = Date.now();
    const threshold = now - MESSAGE_TTL;
    for (const [key, timestamp] of botMessages) {
        if (timestamp < threshold) botMessages.delete(key);
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π
bot.on('message_reaction', async (ctx) => {
    const reaction = ctx.update.message_reaction;
    if (!reaction?.new_reaction?.some(r => r.emoji === 'üí©')) return;

    const messageKey = `${reaction.chat.id}:${reaction.message_id}`;
    if (!botMessages.has(messageKey)) return;

    const username = reaction.user?.username;
    if (!username) return;

    const response = POOP_REACTION_RESPONSES[
        Math.floor(Math.random() * POOP_REACTION_RESPONSES.length)
    ].replace('@user', '@' + username);

    try {
        const sentMessage = await ctx.reply(response);
        botMessages.set(`${ctx.chat.id}:${sentMessage.message_id}`, Date.now());
        
        if (botMessages.size > MESSAGE_LIMIT) {
            const [oldestKey] = botMessages.keys();
            botMessages.delete(oldestKey);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é:', error);
    }
});

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if (ctx.message.from.is_bot) return;

        // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        const shouldRespond = ctx.message.text.toLowerCase().includes('–≥—É—Å—å') || 
                            Math.random() * 100 < config.RESPONSE_PROBABILITY;
        
        if (!shouldRespond) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        messageHandler.saveMessage(ctx.message).catch(console.error);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const response = await messageGenerator.generateResponse(ctx.message);
        if (!response || response === "–ì—É—Å—å –º–æ–ª—á–∏—Ç...") return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
        const sentMessage = await ctx.reply(response);
        botMessages.set(`${ctx.chat.id}:${sentMessage.message_id}`, Date.now());

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑ –≤ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (botMessages.size % 100 === 0) cleanupOldMessages();

        // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        if (botMessages.size > MESSAGE_LIMIT) {
            const [oldestKey] = botMessages.keys();
            botMessages.delete(oldestKey);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        await bot.telegram.deleteWebhook({ drop_pending_updates: true });
        await bot.launch({
            dropPendingUpdates: true,
            allowedUpdates: ['message', 'message_reaction']
        });
        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        setTimeout(startBot, 5000);
    }
}

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

startBot();