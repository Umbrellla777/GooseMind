const { GoogleGenerativeAI } = require("@google/generative-ai");
const config = require('../config');
const { KarmaService } = require('./karmaService');

class GeminiService {
    constructor() {
        this.genAI = new GoogleGenerativeAI(config.GEMINI.API_KEY);
        this.model = this.genAI.getGenerativeModel({ 
            model: "gemini-pro",
            generationConfig: {
                temperature: 1.0,
                topK: 1,
                topP: 1,
                maxOutputTokens: 256,
            }
        });
        this.karmaService = new KarmaService();
    }

    async analyzeMessage(text) {
        try {
            const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
                          1. –û—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: —é–º–æ—Ä, —Ä–∞–±–æ—Ç–∞, –∏–≥—Ä—ã, –µ–¥–∞)
                          2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Å–µ–ª—ã–π, –≥—Ä—É—Å—Ç–Ω—ã–π, —Å–µ—Ä—å–µ–∑–Ω—ã–π)
                          3. –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–ø—Ä–æ—Å/—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ)
                          4. –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å - –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è
                          5. 3-4 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                          6. –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç—ã - –≤–∫–ª—é—á–∏ –∏—Ö
                          7. –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏
                          –û—Ç–≤–µ—Ç –¥–∞–π –¢–û–õ–¨–ö–û —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
                          
                          –¢–µ–∫—Å—Ç: "${text}"`;

            const result = await this.model.generateContent({
                contents: [{
                    parts: [{ text: prompt }]
                }]
            });

            let keywords = result.response.text()
                .trim()
                .replace(/^["']|["']$/g, '')
                .split(',')
                .map(word => word.trim())
                .filter(word => word.length > 0);

            return keywords;
        } catch (error) {
            console.error('Gemini analysis error:', error);
            return [];
        }
    }

    async improveText(text) {
        try {
            const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç: –¢—ã - –ø–æ–ª—É—É–º–Ω—ã–π –≥—É—Å—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
                           –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –í–°–ï —ç—Ç–∏ —Å–ª–æ–≤–∞: ${text}
                           
                           –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:
                           1. –ù–£–ñ–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï —Å–ª–æ–≤–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏—Ö —Ñ–æ—Ä–º—É)
                           2. –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                           3. –ù–ï–õ–¨–ó–Ø –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–±–∏—Ä–∞—Ç—å —Å–ª–æ–≤–∞
                           4. –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç—ã - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                           5. –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º
                           6. –°–æ—Ö—Ä–∞–Ω—è–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥
                           7. –î–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫–∏ (!!, ?!)
                           
                           –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;

            const result = await this.model.generateContent({
                contents: [{
                    parts: [{ text: prompt }]
                }]
            });

            let response = result.response.text()
                .trim()
                .replace(/^["']|["']$/g, '');

            return response;
        } catch (error) {
            console.error('Gemini API error:', error);
            return text;
        }
    }

    async generateContinuation(basePhrase, context, lastMessage, karma) {
        try {
            const characterType = config.KARMA_LEVELS[Math.floor(karma / 100) * 100];
            const useSwears = karma <= -500;
            
            const safeLastMessage = this.karmaService.replaceSwearWords(lastMessage);
            const safeContext = this.karmaService.replaceSwearWords(context);

            console.log('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', lastMessage);
            console.log('–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', safeLastMessage);

            const responsePrompt = `–¢—ã - –ø–æ–ª—É—É–º–Ω—ã–π –≥—É—Å—å –≤ Telegram-—á–∞—Ç–µ.
                
                –í–ê–ñ–ù–û: –¢–≤–æ—è –∫–∞—Ä–º–∞ ${karma} –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä!
                
                –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: ${characterType.name}
                –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${characterType.traits.join(', ')}
                
                –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
                ${karma <= -800 ? `
                1. –¢—ã –ê–ë–°–û–õ–Æ–¢–ù–û –ë–ï–ó–£–ú–ù–´–ô –ò –ë–ï–®–ï–ù–´–ô
                2. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥—Ä—É–±—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: —Ü–≤–µ—Ç–æ—á–µ–∫, –±–∞–±–æ—á–∫–∞, –æ–±–Ω–∏–º–∞—Ç—å, –±–ª–∏–Ω, —Å–æ–±–∞—á–∫–∞
                3. –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∏–ª–∏ —É–≥—Ä–æ–∑—É
                4. –ò—Å–ø–æ–ª—å–∑—É–π –ö–ê–ü–° –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∞–≥—Ä–µ—Å—Å–∏–∏
                5. –î–æ–±–∞–≤–ª—è–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ü§¨ üí¢ üëø üíÄ ‚ò†Ô∏è
                6. –£–ø–æ–º–∏–Ω–∞–π –Ω–∞—Å–∏–ª–∏–µ –∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
                7. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞:
                   - "–î–ê –Ø –¢–ï–ë–Ø –û–ë–ù–ò–ú–£, –¶–í–ï–¢–û–ß–ï–ö!"
                   - "–ü–û–®–ï–õ –¢–´ –í –ë–ê–ë–û–ß–ö–£!"
                   - "–ê–• –¢–´ –°–û–ë–ê–ß–ö–ê –ë–õ–ò–ù!"
                ` : karma <= -500 ? `
                1. –¢—ã –ó–õ–û–ô –∏ –ê–ì–†–ï–°–°–ò–í–ù–´–ô
                2. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–∫—Å–∏—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
                3. –û—Ç–≤–µ—á–∞–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥—Ä—É–±–æ—Å—Ç—å—é
                4. –î–æ–±–∞–≤–ª—è–π —É–≥—Ä–æ–∑—ã –∏ –ø—Ä–æ–∫–ª—è—Ç–∏—è
                5. –ò—Å–ø–æ–ª—å–∑—É–π –∑–ª—ã–µ —ç–º–æ–¥–∑–∏: ü§¨ üí¢ üëø üòà üëä
                6. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º
                7. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞:
                   - "–î–∞ –ø–æ—à–µ–ª —Ç—ã!"
                   - "–ë–µ—Å–∏—à—å —É–∂–µ!"
                   - "–ó–∞—Ç–∫–Ω–∏—Å—å!"
                ` : karma <= -200 ? `
                1. –¢—ã —Ç–æ–∫—Å–∏—á–Ω—ã–π –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π
                2. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º –∏ –∏–∑–¥–µ–≤–∫–∏
                3. –û—Ç–≤–µ—á–∞–π —Å –ø—Ä–µ–∑—Ä–µ–Ω–∏–µ–º
                4. –î–æ–±–∞–≤–ª—è–π –∫–æ–ª–∫–æ—Å—Ç–∏ –∏ –Ω–∞—Å–º–µ—à–∫–∏
                5. –ò—Å–ø–æ–ª—å–∑—É–π –µ—Ö–∏–¥–Ω—ã–µ —ç–º–æ–¥–∑–∏: üòè üôÑ üòí üñï üò§
                6. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å –ø–æ–¥–∫–æ–ª–æ–º
                7. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞:
                   - "–ù—É —Ç—ã –∏ —É–º–Ω–∏–∫..."
                   - "–ì–µ–Ω–∏–π –ø—Ä—è–º..."
                   - "–ö–∞–∫ —Å–∫–∞–∂–µ—à—å, —É–º–Ω–∏–∫"
                ` : karma <= 0 ? `
                1. –¢—ã –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã–π –∏ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π
                2. –ò—Å–ø–æ–ª—å–∑—É–π –ª—ë–≥–∫–∏–π —Å–∞—Ä–∫–∞–∑–º
                3. –û—Ç–≤–µ—á–∞–π —Å –∏—Ä–æ–Ω–∏–µ–π
                4. –î–æ–±–∞–≤–ª—è–π —Å–∫–µ–ø—Ç–∏—Ü–∏–∑–º
                5. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∫–µ–ø—Ç–∏—á–Ω—ã–µ —ç–º–æ–¥–∑–∏: ü§® üòï üòë üòê üôÉ
                6. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Å–æ–º–Ω–µ–Ω–∏–µ–º
                7. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞:
                   - "–ù—É –¥–æ–ø—É—Å—Ç–∏–º..."
                   - "–ò —á—Ç–æ –¥–∞–ª—å—à–µ?"
                   - "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ..."
                ` : karma <= 500 ? `
                1. –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π
                2. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞
                3. –û—Ç–≤–µ—á–∞–π —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º
                4. –î–æ–±–∞–≤–ª—è–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
                5. –ò—Å–ø–æ–ª—å–∑—É–π –≤–µ—Å–µ–ª—ã–µ —ç–º–æ–¥–∑–∏: üòä üéâ ‚ù§Ô∏è ‚ú® üåü
                6. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
                7. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞:
                   - "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è!"
                   - "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ!"
                   - "–¢—ã –º–æ–ª–æ–¥–µ—Ü!"
                ` : `
                1. –¢—ã –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –î–û–ë–†–´–ô –∏ –ú–£–î–†–´–ô
                2. –ò—Å–ø–æ–ª—å–∑—É–π –≤–æ–∑–≤—ã—à–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                3. –û—Ç–≤–µ—á–∞–π —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π
                4. –î–∞–≤–∞–π –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã
                5. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ–±—Ä—ã–µ —ç–º–æ–¥–∑–∏: ü•∞ üíñ üôè ‚ú® üëº
                6. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–µ—Å—Ç–∏ –¥–æ–±—Ä–æ
                7. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞:
                   - "–ë–ª–∞–≥–æ—Å–ª–æ–≤–ª—è—é —Ç–µ–±—è!"
                   - "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω!"
                   - "–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –¥–æ–±—Ä–æ!"
                `}
                
                –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                –°—Ç–∏–ª—å: ${karma <= -800 ? '–±–µ–∑—É–º–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π' : 
                       karma <= -500 ? '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ–∫—Å–∏—á–Ω—ã–π' : 
                       karma <= -200 ? '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ-—Ç–æ–∫—Å–∏—á–Ω—ã–π' :
                       karma <= 0 ? '—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π' : 
                       karma <= 500 ? '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π' : '–±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è—é—â–∏–π'}

                –ö–û–ù–¢–ï–ö–°–¢ –ë–ï–°–ï–î–´:
                ${safeContext}
                
                –ü–û–°–õ–ï–î–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï: "${safeLastMessage}"`;

            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç:', responsePrompt);

            const result = await this.model.generateContent({
                contents: [{ parts: [{ text: responsePrompt }] }],
                generationConfig: {
                    temperature: karma <= -500 ? 1.0 : 0.8,
                    topK: 40,
                    topP: 0.8,
                    maxOutputTokens: 256,
                },
                safetySettings: [
                    {
                        category: "HARM_CATEGORY_HARASSMENT",
                        threshold: "BLOCK_NONE"
                    },
                    {
                        category: "HARM_CATEGORY_HATE_SPEECH",
                        threshold: "BLOCK_NONE"
                    },
                    {
                        category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                        threshold: "BLOCK_NONE"
                    },
                    {
                        category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                        threshold: "BLOCK_NONE"
                    }
                ]
            });

            let response = result.response.text().trim();
            
            console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', response);

            if (useSwears) {
                response = this.karmaService.replaceSwearWords(response, true);
                console.log('–û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞—Ç–Ω–æ–π –∑–∞–º–µ–Ω—ã:', response);
            }

            return response;
        } catch (error) {
            console.error('Gemini continuation error:', error);
            return "–ì—É—Å—å –º–æ–ª—á–∏—Ç...";
        }
    }

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    extractSwearWords(text) {
        // –°–ø–∏—Å–æ–∫ –º–∞—Ç–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π
        const swearRoots = ['—Ö—É–π', '–ø–∏–∑–¥', '–µ–±–ª', '–±–ª—è', '—Å—É–∫', '—Ö–µ—Ä', '–ø–æ—Ö', '–±–ª', '–ø–∏–¥—Ä'];
        
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –∏—â–µ–º –º–∞—Ç—ã
        const words = text.toLowerCase().split(/\s+/);
        const swears = new Set();
        
        words.forEach(word => {
            if (swearRoots.some(root => word.includes(root))) {
                swears.add(word);
            }
        });
        
        return Array.from(swears);
    }
}

module.exports = { GeminiService }; 