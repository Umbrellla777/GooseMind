const config = require('../config');
const { MessageGenerator } = require('../services/messageGenerator');

// –£–ø—Ä–æ—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –¥–æ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
const REACTIONS = [
    'üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè',
    'ü§î', 'ü§Ø', 'üò±', 'ü§¨', 'üò¢',
    'üéâ', 'ü§©', 'ü§Æ', 'üí©', 'üôè',
    'üëé', '‚ù§Ô∏è‚Äçüî•', 'ü§®', 'üñï', 
    'üí©', 'üí©', 'üí©'  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –Ω–∞ üí©, –¥–æ–±–∞–≤–ª—è—è –µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
];

class MessageHandler {
    constructor(supabase) {
        this.supabase = supabase;
        this.messageGenerator = new MessageGenerator(supabase);
    }

    async saveMessage(message) {
        return await this.messageGenerator.saveMessage(message);
    }

    async saveMessageDirect(message) {
        return await this.messageGenerator.saveMessageDirect(message);
    }

    parseMessage(text) {
        return text
            .toLowerCase()
            .replace(/[^\w–∞-—è—ë\s]/gi, '')
            .split(/\s+/)
            .filter(word => word.length > 0);
    }

    isBotMentioned(text) {
        const lowerText = text.toLowerCase();
        return config.BOT_NAMES.some(name => 
            lowerText.includes(name.toLowerCase()) ||
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–º–µ–Ω
            (name.toLowerCase() === '–ø–æ–ª–æ—É–º–Ω—ã–π –≥—É—Å—å' && 
             lowerText.includes('–ø–æ–ª–æ—É–º–Ω—ã–π') && 
             lowerText.includes('–≥—É—Å—å'))
        );
    }

    async clearDatabase() {
        await this.supabase.from('messages').delete().neq('id', 0);
        await this.supabase.from('words').delete().neq('id', 0);
    }

    async analyzeForReaction(message) {
        try {
            if (message.from?.id === message.botInfo?.id) {
                return null;
            }

            if (Math.random() * 100 >= config.REACTION_PROBABILITY) {
                return null;
            }

            return [REACTIONS[Math.floor(Math.random() * REACTIONS.length)]];
        } catch (error) {
            console.error('Error analyzing for reaction:', error);
            return null;
        }
    }

    async checkDatabaseContent(chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            const { data: messages } = await this.supabase
                .from('messages')
                .select('id')
                .eq('chat_id', chatId);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤
            const { data: words } = await this.supabase
                .from('words')
                .select('id');

            const messagesCount = messages?.length || 0;
            const wordsCount = words?.length || 0;

            console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ ${chatId}:`);
            console.log(`- –°–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}`);
            console.log(`- –í—Å–µ–≥–æ —Å–ª–æ–≤: ${wordsCount}`);

            return {
                messages: messagesCount,
                words: wordsCount
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    async analyzeMessageForKarma(message) {
        if (!message?.text) return 0;
        const text = message.text.toLowerCase();

        let karmaChange = 0;
        const MAX_NEGATIVE_CHANGE = -1;
        const MAX_POSITIVE_CHANGE = 0.7;

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫–∞—Ä–º—ã
        const badPatterns = [
            // –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –∞–≥—Ä–µ—Å—Å–∏—è
            /(–¥—É—Ä[–∞–æ]–∫|–∏–¥–∏–æ—Ç|—Ç—É–ø–æ–π|–º—É–¥–∞–∫|–∫–æ–∑–µ–ª|–ø—Ä–∏–¥—É—Ä–æ–∫)/i,
            /(–ø–æ—à[–µ—ë]–ª —Ç—ã|–∏–¥–∏ –Ω–∞|–≤–∞–ª–∏ –æ—Ç—Å—é–¥–∞)/i,
            // –ú–∞—Ç—ã –∏ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            /(–±–ª—è|—Ö—É–π|–ø–∏–∑–¥|–µ–±[–∞–æ]|—Å—É–∫[–∞–∏]|—Ö–µ—Ä)/i,
            // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
            /(–Ω–µ–Ω–∞–≤–∏–∂—É|–±–µ—Å–∏—Ç|–¥–æ—Å—Ç–∞–ª|–∑–∞–µ–±–∞–ª)/i,
            // –°–ø–∞–º –∏ —Ñ–ª—É–¥
            /(.)\1{4,}/,  // –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
            /(.)(?:\1|\s){10,}/  // –î–ª–∏–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ];

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—Ä–º—ã
        const goodPatterns = [
            // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å
            /(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã|–ø—Ä–æ—à—É|–∏–∑–≤–∏–Ω–∏)/i,
            // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
            /(–∫—Ä—É—Ç–æ|–∫–ª–∞—Å—Å|–∑–¥–æ—Ä–æ–≤–æ|–æ—Ç–ª–∏—á–Ω–æ|—Å—É–ø–µ—Ä|–º–æ–ª–æ–¥–µ—Ü|—Ö–æ—Ä–æ—à|–∫—Ä–∞—Å–∞–≤)/i,
            // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            /(–ø—Ä–µ–¥–ª–∞–≥–∞—é|–¥–∞–≤–∞–π—Ç–µ|–ø–æ–º–æ–≥|–ø–æ–ª–µ–∑–Ω–æ|–ø–æ–¥–¥–µ—Ä–∂–∏–≤|—Å–æ–≥–ª–∞—Å–µ–Ω)/i,
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —ç–º–ø–∞—Ç–∏—è
            /(–ø–æ–Ω–∏–º–∞—é|—Å–æ—á—É–≤—Å—Ç–≤—É|–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞|–ª—é–±|—Ä–∞–¥|–¥–æ–±—Ä)/i,
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø—Ä–æ—â–∞–Ω–∏—è
            /(–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä|–ø—Ä–∏–≤–µ—Ç|–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ)/i
        ];

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        let hasPositivePattern = false;
        for (const pattern of goodPatterns) {
            if (pattern.test(text)) {
                hasPositivePattern = true;
                if (pattern.source.includes('—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä')) {
                    karmaChange = (Math.random() * 0.2) + 0.2; // +0.2 –¥–æ +0.4
                } else {
                    karmaChange = 0.1; // +0.1
                }
                break; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ
        if (!hasPositivePattern) {
            for (const pattern of badPatterns) {
                if (pattern.test(text)) {
                    if (pattern.source.includes('–±–ª—è|—Ö—É–π|–ø–∏–∑–¥')) {
                        karmaChange = -(Math.random() * 0.3 + 0.4); // -0.4 –¥–æ -0.7
                    } else {
                        karmaChange = -(Math.random() * 0.2 + 0.1); // -0.1 –¥–æ -0.3
                    }
                    break; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                }
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if (karmaChange === 0) {
            if (text.length > 200) {
                karmaChange += 0.1;
            }

            if (/^[–ê-–ØA-Z\s]+$/.test(text)) {
                karmaChange -= 0.2;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
            const recentMessages = await this.getRecentMessages(message.chat.id, 5);
            if (recentMessages.some(msg => msg.text === message.text)) {
                karmaChange -= 0.3;
            }
        }

        console.log('Karma change analysis:', {
            text,
            karmaChange,
            patterns: {
                good: goodPatterns.some(p => p.test(text)),
                bad: badPatterns.some(p => p.test(text))
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
        if (karmaChange < 0) {
            return Math.max(MAX_NEGATIVE_CHANGE, karmaChange);
        } else {
            return Math.min(MAX_POSITIVE_CHANGE, karmaChange);
        }
    }

    async getRecentMessages(chatId, limit = 5) {
        try {
            const { data: messages } = await this.supabase
                .from('messages')
                .select('text')
                .eq('chat_id', chatId)
                .order('created_at', { ascending: false })
                .limit(limit);
            return messages || [];
        } catch (error) {
            console.error('Error getting recent messages:', error);
            return [];
        }
    }

    async updateKarmaForMessage(message) {
        try {
            const karmaChange = await this.analyzeMessageForKarma(message);
            if (karmaChange !== 0) {
                const { data: currentKarma } = await this.supabase
                    .from('chat_karma')
                    .select('karma_value')
                    .eq('chat_id', message.chat.id)
                    .single();

                const oldKarma = currentKarma?.karma_value || 0;
                // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                const newKarma = Math.round(Math.max(-1000, Math.min(1000, oldKarma + karmaChange)) * 10) / 10;

                const { error } = await this.supabase
                    .from('chat_karma')
                    .upsert({
                        chat_id: message.chat.id,
                        karma_value: newKarma,
                        last_update: new Date().toISOString()
                    });

                if (error) throw error;

                return {
                    oldKarma: parseFloat(oldKarma),
                    newKarma: parseFloat(newKarma)
                };
            }
            return null;
        } catch (error) {
            console.error('Error updating karma:', error);
            return null;
        }
    }
}

module.exports = { MessageHandler }; 