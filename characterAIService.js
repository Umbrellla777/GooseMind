const CharacterAI = require('node_characterai');
const config = require('../config');

class CharacterAIService {
    constructor() {
        this.characterAI = new CharacterAI();
        this.chat = null;
        this.initialize();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        setInterval(() => this.checkToken(), 24 * 60 * 60 * 1000);
    }

    async initialize() {
        try {
            await this.characterAI.authenticateWithToken(config.CHARACTER_AI.TOKEN);
            
            // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
            this.chat = await this.characterAI.createOrContinueChat(
                config.CHARACTER_AI.CHARACTER_ID
            );

            console.log('CharacterAI initialized successfully');
            await this.checkToken(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        } catch (error) {
            if (error.message.includes('token expired')) {
                console.error('Token expired, switching to guest mode');
                await this.initializeAsGuest();
            } else {
                console.error('CharacterAI init error:', error);
                await this.initializeAsGuest();
            }
        }
    }

    async checkToken() {
        try {
            const token = config.CHARACTER_AI.TOKEN;
            if (!token) return;

            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const [header, payload, signature] = token.split('.');
            const decodedPayload = JSON.parse(Buffer.from(payload, 'base64').toString());

            // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            const expirationDate = new Date(decodedPayload.exp * 1000);
            const now = new Date();
            const daysUntilExpiration = Math.floor((expirationDate - now) / (1000 * 60 * 60 * 24));

            if (daysUntilExpiration <= 3) {
                console.warn(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–∫–µ–Ω Character AI –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysUntilExpiration} –¥–Ω–µ–π!`);
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
                if (this.bot) {
                    await this.bot.telegram.sendMessage(
                        config.ADMIN_CHAT_ID,
                        `‚ö†Ô∏è –¢–æ–∫–µ–Ω Character AI –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysUntilExpiration} –¥–Ω–µ–π!\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.`
                    );
                }
            }
        } catch (error) {
            console.error('Error checking token:', error);
        }
    }

    async initializeAsGuest() {
        try {
            await this.characterAI.authenticateAsGuest();
            this.chat = await this.characterAI.createOrContinueChat(
                config.CHARACTER_AI.CHARACTER_ID
            );
            console.log('CharacterAI initialized as guest');
        } catch (error) {
            console.error('Guest auth failed:', error);
        }
    }

    async generateContinuation(basePhrase, context, lastMessage, characterType = 'normal') {
        try {
            if (!this.chat) {
                await this.initialize();
            }

            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
            const prompt = `[–•–∞—Ä–∞–∫—Ç–µ—Ä: ${characterSettings.name}
            –ö–∞—Ä–º–∞: ${karma}
            –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${characterSettings.traits.join(', ')}]
            
            ${lastMessage}`;

            const response = await this.chat.sendAndAwaitResponse(prompt, true);
            
            // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
            if (karma <= -500) {
                return this.enhanceNegativeResponse(response.text, karma);
            }

            return response.text;

        } catch (error) {
            console.error('CharacterAI error:', error);
            return "–ì—É—Å—å –º–æ–ª—á–∏—Ç...";
        }
    }

    async improveText(text, characterType = 'normal') {
        try {
            if (!this.chat) {
                await this.initialize();
            }

            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');

            const prompt = `–£–ª—É—á—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª: ${text}`;
            const response = await this.chat.sendAndAwaitResponse(prompt, true);

            if (karma <= -500) {
                return this.enhanceNegativeResponse(response.text, karma);
            }

            return response.text;
        } catch (error) {
            console.error('CharacterAI improve error:', error);
            return text;
        }
    }

    enhanceNegativeResponse(text, karma) {
        let enhanced = text.toUpperCase();
        
        const replacements = {
            '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è': '–ë–ï–°–ò–¢',
            '–ø–ª–æ—Ö–æ': '–•–†–ï–ù–û–í–û',
            '—É—Ö–æ–¥–∏': '–ü–û–®–ï–õ –ù–ê–•–†–ï–ù',
            '–∑–∞–º–æ–ª—á–∏': '–ó–ê–í–ê–õ–ò –ï–ë–ê–õ–û',
            '–≥–ª—É–ø—ã–π': '–¢–£–ü–û–ô –ú–£–î–ê–ö',
            '–¥—É—Ä–∞–∫': '–î–û–õ–ë–û–Å–ë',
            '–∑–ª–æ–π': '–ë–ï–®–ï–ù–´–ô',
            '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç': '–ó–ê–ï–ë–ê–õ–û'
        };

        for (const [soft, hard] of Object.entries(replacements)) {
            enhanced = enhanced.replace(new RegExp(soft, 'gi'), hard);
        }

        const angryEmoji = ['üò°', 'ü§¨', 'üí¢', 'üëø', 'üíÄ', '‚ò†Ô∏è', 'üî™'];
        if (!enhanced.includes('üò°') && !enhanced.includes('ü§¨')) {
            enhanced = `${angryEmoji[Math.floor(Math.random() * angryEmoji.length)]} ${enhanced}`;
        }

        return enhanced;
    }
}

module.exports = { CharacterAIService }; 