const CharacterAI = require('node_characterai');
const config = require('../config');

class CharacterAIService {
    constructor() {
        this.characterAI = new CharacterAI();
        this.chat = null;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        process.setMaxListeners(5);
        
        this.initialize();
    }

    async initialize() {
        try {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Puppeteer
            this.characterAI.requester.puppeteerPath = '/usr/bin/chromium';
            this.characterAI.requester.puppeteerLaunchArgs = [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--no-first-run'
            ];

            // –ü—Ä–æ–±—É–µ–º –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º —Å—Ä–∞–∑—É
            await this.initializeAsGuest();

        } catch (error) {
            console.error('CharacterAI init error:', error);
        }
    }

    async initializeAsGuest() {
        try {
            await this.characterAI.authenticateAsGuest();
            this.chat = await this.characterAI.createOrContinueChat(
                config.CHARACTER_AI.CHARACTER_ID
            );
            console.log('CharacterAI initialized as guest');
        } catch (error) {
            console.error('Guest auth failed:', error);
            // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => this.initializeAsGuest(), 5000);
        }
    }

    async generateContinuation(basePhrase, context, lastMessage, characterType = 'normal') {
        try {
            if (!this.chat) {
                await this.initialize();
            }

            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');

            const prompt = `[–•–∞—Ä–∞–∫—Ç–µ—Ä: ${characterSettings.name}
            –ö–∞—Ä–º–∞: ${karma}
            –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${characterSettings.traits.join(', ')}]
            
            ${lastMessage}`;

            const response = await this.chat.sendAndAwaitResponse(prompt, true);
            
            if (karma <= -500) {
                return this.enhanceNegativeResponse(response.text, karma);
            }

            return response.text;

        } catch (error) {
            console.error('CharacterAI error:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —á–∞—Ç–æ–º - –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            if (error.message.includes('chat') || error.message.includes('token')) {
                await this.initialize();
            }
            
            return "–ì—É—Å—å –º–æ–ª—á–∏—Ç...";
        }
    }

    async improveText(text, characterType = 'normal') {
        try {
            if (!this.chat) {
                await this.initialize();
            }

            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');

            const prompt = `–£–ª—É—á—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª: ${text}`;
            const response = await this.chat.sendAndAwaitResponse(prompt, true);

            if (karma <= -500) {
                return this.enhanceNegativeResponse(response.text, karma);
            }

            return response.text;
        } catch (error) {
            console.error('CharacterAI improve error:', error);
            return text;
        }
    }

    enhanceNegativeResponse(text, karma) {
        let enhanced = text.toUpperCase();
        
        const replacements = {
            '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è': '–ë–ï–°–ò–¢',
            '–ø–ª–æ—Ö–æ': '–•–†–ï–ù–û–í–û',
            '—É—Ö–æ–¥–∏': '–ü–û–®–ï–õ –ù–ê–•–†–ï–ù',
            '–∑–∞–º–æ–ª—á–∏': '–ó–ê–í–ê–õ–ò –ï–ë–ê–õ–û',
            '–≥–ª—É–ø—ã–π': '–¢–£–ü–û–ô –ú–£–î–ê–ö',
            '–¥—É—Ä–∞–∫': '–î–û–õ–ë–û–Å–ë',
            '–∑–ª–æ–π': '–ë–ï–®–ï–ù–´–ô',
            '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç': '–ó–ê–ï–ë–ê–õ–û'
        };

        for (const [soft, hard] of Object.entries(replacements)) {
            enhanced = enhanced.replace(new RegExp(soft, 'gi'), hard);
        }

        const angryEmoji = ['üò°', 'ü§¨', 'üí¢', 'üëø', 'üíÄ', '‚ò†Ô∏è', 'üî™'];
        if (!enhanced.includes('üò°') && !enhanced.includes('ü§¨')) {
            enhanced = `${angryEmoji[Math.floor(Math.random() * angryEmoji.length)]} ${enhanced}`;
        }

        return enhanced;
    }
}

module.exports = { CharacterAIService }; 