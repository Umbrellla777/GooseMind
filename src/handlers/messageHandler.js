const config = require('../config');
const { MessageGenerator } = require('../services/messageGenerator');

// –£–ø—Ä–æ—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –¥–æ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
const REACTIONS = [
    'üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè',
    'ü§î', 'ü§Ø', 'üò±', 'ü§¨', 'üò¢',
    'üéâ', 'ü§©', 'ü§Æ', 'üí©', 'üôè',
    'üëé', '‚ù§Ô∏è‚Äçüî•', 'ü§®', 'üñï'
];

class MessageHandler {
    constructor(supabase) {
        this.supabase = supabase;
        this.messageGenerator = new MessageGenerator(supabase);
    }

    async saveMessage(message) {
        return await this.messageGenerator.saveMessage(message);
    }

    async saveMessageDirect(message) {
        return await this.messageGenerator.saveMessageDirect(message);
    }

    parseMessage(text) {
        return text
            .toLowerCase()
            .replace(/[^\w–∞-—è—ë\s]/gi, '')
            .split(/\s+/)
            .filter(word => word.length > 0);
    }

    isBotMentioned(text) {
        const lowerText = text.toLowerCase();
        return config.BOT_NAMES.some(name => 
            lowerText.includes(name.toLowerCase()) ||
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–º–µ–Ω
            (name.toLowerCase() === '–ø–æ–ª—É—É–º–Ω—ã–π –≥—É—Å—å' && 
             lowerText.includes('–ø–æ–ª—É—É–º–Ω—ã–π') && 
             lowerText.includes('–≥—É—Å—å'))
        );
    }

    async clearDatabase() {
        await this.supabase.from('messages').delete().neq('id', 0);
        await this.supabase.from('words').delete().neq('id', 0);
    }

    async analyzeForReaction(message) {
        try {
            // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            if (message.from?.id === message.botInfo?.id) {
                return null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if (Math.random() * 100 >= config.REACTION_PROBABILITY) {
                return null;
            }

            // –í—Å–µ–≥–¥–∞ —Å—Ç–∞–≤–∏–º –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
            const reactions = [
                REACTIONS[Math.floor(Math.random() * REACTIONS.length)]
            ];

            // –í 30% —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Ä–µ–∞–∫—Ü–∏—é
            const SECOND_REACTION_CHANCE = 30; // 30%
            if (Math.random() * 100 < SECOND_REACTION_CHANCE) {
                let secondReaction;
                do {
                    secondReaction = REACTIONS[Math.floor(Math.random() * REACTIONS.length)];
                } while (secondReaction === reactions[0]); // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                reactions.push(secondReaction);
            }

            return reactions;
        } catch (error) {
            console.error('Error analyzing for reaction:', error);
            return null;
        }
    }

    async checkDatabaseContent(chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            const { data: messages } = await this.supabase
                .from('messages')
                .select('id')
                .eq('chat_id', chatId);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤
            const { data: words } = await this.supabase
                .from('words')
                .select('id');

            const messagesCount = messages?.length || 0;
            const wordsCount = words?.length || 0;

            console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ ${chatId}:`);
            console.log(`- –°–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}`);
            console.log(`- –í—Å–µ–≥–æ —Å–ª–æ–≤: ${wordsCount}`);

            return {
                messages: messagesCount,
                words: wordsCount
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }
}

module.exports = { MessageHandler }; 