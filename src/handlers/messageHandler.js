const config = require('../config');
const { MessageGenerator } = require('../services/messageGenerator');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
const REACTIONS = {
    POSITIVE: ['üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè'],
    NEGATIVE: ['üëé', 'üí©', 'ü§Æ'],
    FUNNY: ['ü§£', 'üòÇ'],
    THINKING: ['ü§î'],
    SURPRISED: ['üò±', 'ü§Ø'],
    RANDOM: ['ü¶Ü', '‚ù§Ô∏è‚Äçüî•', 'ü§®', 'üñï', 'üí©']
};

class MessageHandler {
    constructor(supabase) {
        this.supabase = supabase;
        this.messageGenerator = new MessageGenerator(supabase);
    }

    async saveMessage(message) {
        return await this.messageGenerator.saveMessage(message);
    }

    async saveMessageDirect(message) {
        return await this.messageGenerator.saveMessageDirect(message);
    }

    parseMessage(text) {
        return text
            .toLowerCase()
            .replace(/[^\w–∞-—è—ë\s]/gi, '')
            .split(/\s+/)
            .filter(word => word.length > 0);
    }

    isBotMentioned(text) {
        const lowerText = text.toLowerCase();
        return config.BOT_NAMES.some(name => 
            lowerText.includes(name.toLowerCase()) ||
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–º–µ–Ω
            (name.toLowerCase() === '–ø–æ–ª—É—É–º–Ω—ã–π –≥—É—Å—å' && 
             lowerText.includes('–ø–æ–ª—É—É–º–Ω—ã–π') && 
             lowerText.includes('–≥—É—Å—å'))
        );
    }

    async clearDatabase() {
        await this.supabase.from('messages').delete().neq('id', 0);
        await this.supabase.from('words').delete().neq('id', 0);
    }

    async analyzeForReaction(message) {
        try {
            // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            if (message.from.id === message.botInfo?.id) {
                return null;
            }

            // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏
            if (Math.random() * 100 >= config.REACTION_PROBABILITY) {
                return null;
            }

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            const text = message.text.toLowerCase();
            const words = this.parseMessage(text);

            // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            let reactionType = this.selectReactionType(text, words);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é
            return this.getRandomReaction(reactionType);
        } catch (error) {
            console.error('Error analyzing for reaction:', error);
            return null;
        }
    }

    selectReactionType(text, words) {
        // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        const positiveWords = ['–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å', '—Å—É–ø–µ—Ä', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–¥–∞', '—Å–æ–≥–ª–∞—Å–µ–Ω'];
        // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        const negativeWords = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å', '–æ—Ç—Å—Ç–æ–π', '–Ω–µ—Ç', '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '–≥–æ–≤–Ω–æ', '–¥–µ—Ä—å–º–æ', '—Ö—Ä–µ–Ω—å'];
        // –°–º–µ—à–Ω—ã–µ —Å–ª–æ–≤–∞
        const funnyWords = ['–∞—Ö–∞—Ö', '—Ö–∞—Ö', '–ª–æ–ª', '–∫–µ–∫', '—Å–º–µ—à–Ω–æ', '—Ä–∂–∞–∫–∞'];
        // –î—É–º–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        const thinkingWords = ['–¥—É–º–∞—é', '–ø–æ–ª–∞–≥–∞—é', '–∫–∞–∂–µ—Ç—Å—è', '–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–∞–≤–µ—Ä–Ω–æ–µ'];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        if (words.some(word => negativeWords.includes(word))) return 'NEGATIVE';
        if (words.some(word => funnyWords.includes(word))) return 'FUNNY';
        if (words.some(word => positiveWords.includes(word))) return 'POSITIVE';
        if (words.some(word => thinkingWords.includes(word))) return 'THINKING';
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Å –±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –Ω–∞ RANDOM
        const types = ['POSITIVE', 'NEGATIVE', 'RANDOM', 'RANDOM', 'RANDOM']; // –£–≤–µ–ª–∏—á–∏–ª–∏ —à–∞–Ω—Å —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
        return types[Math.floor(Math.random() * types.length)];
    }

    getRandomReaction(type) {
        const reactions = REACTIONS[type];
        if (!reactions) return null;

        // –£–≤–µ–ª–∏—á–∏–º —à–∞–Ω—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
        if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
            const mainReaction = reactions[Math.floor(Math.random() * reactions.length)];
            const extraReaction = Math.random() < 0.5 ? 'üí©' : REACTIONS.RANDOM[Math.floor(Math.random() * REACTIONS.RANDOM.length)];
            return [mainReaction, extraReaction];
        }

        return [reactions[Math.floor(Math.random() * reactions.length)]];
    }

    async checkDatabaseContent(chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            const { data: messages } = await this.supabase
                .from('messages')
                .select('id')
                .eq('chat_id', chatId);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤
            const { data: words } = await this.supabase
                .from('words')
                .select('id');

            const messagesCount = messages?.length || 0;
            const wordsCount = words?.length || 0;

            console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ ${chatId}:`);
            console.log(`- –°–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}`);
            console.log(`- –í—Å–µ–≥–æ —Å–ª–æ–≤: ${wordsCount}`);

            return {
                messages: messagesCount,
                words: wordsCount
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }
}

module.exports = { MessageHandler }; 