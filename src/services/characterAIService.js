const axios = require('axios');
const config = require('../config');

class CharacterAIService {
    constructor() {
        this.baseUrl = 'https://character.ai';
        this.token = config.CHARACTER_AI.TOKEN;
        this.characterId = config.CHARACTER_AI.CHARACTER_ID;
        this.chatId = null;
        
        this.client = axios.create({
            baseURL: this.baseUrl,
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Authorization': `Token ${this.token}`,
                'Cookie': `web-next-auth=${this.token}`,
                'Accept': 'application/json',
                'Accept-Language': 'en-US,en;q=0.9',
                'Referer': 'https://character.ai/',
                'Origin': 'https://character.ai'
            }
        });

        this.initialize();
    }

    async initialize() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            const characterInfo = await this.getCharacterInfo();
            console.log('Character info loaded:', characterInfo.name);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            const chatInfo = await this.createOrGetChat();
            this.chatId = chatInfo.external_id;
            console.log('Chat initialized:', this.chatId);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            await this.setBasePrompt();
        } catch (error) {
            console.error('CharacterAI init error:', error);
            setTimeout(() => this.initialize(), 5000);
        }
    }

    async getCharacterInfo() {
        try {
            const response = await this.client.get(`/chat/character/info/${this.characterId}/`);
            return response.data;
        } catch (error) {
            console.error('Error fetching character info:', error);
            throw error;
        }
    }

    async createOrGetChat() {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
            const response = await this.client.get(`/chat/history/continue/`, {
                params: { character_external_id: this.characterId }
            });
            return response.data;
        } catch (error) {
            console.error('Error getting/creating chat:', error);
            throw error;
        }
    }

    async setBasePrompt() {
        const basePrompt = `–¢—ã –ø–æ–ª—É—É–º–Ω—ã–π –≥—É—Å—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–µ. 
        –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º –∏ —Å–∞—Ä–∫–∞–∑–º–æ–º. 
        –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
        –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π.
        –¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ä–º—ã.`;

        try {
            await this.client.post('/chat/character/update_greeting/', {
                character_external_id: this.characterId,
                greeting: basePrompt
            });
        } catch (error) {
            console.error('Error setting base prompt:', error);
        }
    }

    async generateContinuation(basePhrase, context, lastMessage, characterType = 'normal') {
        try {
            if (!this.chatId) {
                await this.initialize();
            }

            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');

            const prompt = `[–•–∞—Ä–∞–∫—Ç–µ—Ä: ${characterSettings.name}
            –ö–∞—Ä–º–∞: ${karma}
            –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${characterSettings.traits.join(', ')}]
            
            ${lastMessage}`;

            const response = await this.client.post('/chat/streaming/send/', {
                history_external_id: this.chatId,
                text: prompt,
                tgt: 'internal_id'
            });
            
            let text = response.data.replies[0].text;

            if (karma <= -500) {
                text = this.enhanceNegativeResponse(text, karma);
            }

            return text;

        } catch (error) {
            console.error('CharacterAI error:', error);
            
            if (error.response?.status === 401) {
                await this.initialize();
            }
            
            return "–ì—É—Å—å –º–æ–ª—á–∏—Ç...";
        }
    }

    async improveText(text, characterType = 'normal') {
        try {
            if (!this.chatId) {
                await this.initialize();
            }

            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');

            const prompt = `–£–ª—É—á—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª: ${text}`;
            const response = await this.client.post('/chat/streaming/send/', {
                history_external_id: this.chatId,
                text: prompt,
                tgt: 'internal_id'
            });

            let improvedText = response.data.replies[0].text;

            if (karma <= -500) {
                improvedText = this.enhanceNegativeResponse(improvedText, karma);
            }

            return improvedText;
        } catch (error) {
            console.error('CharacterAI improve error:', error);
            return text;
        }
    }

    enhanceNegativeResponse(text, karma) {
        let enhanced = text.toUpperCase();
        
        const replacements = {
            '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è': '–ë–ï–°–ò–¢',
            '–ø–ª–æ—Ö–æ': '–•–†–ï–ù–û–í–û',
            '—É—Ö–æ–¥–∏': '–ü–û–®–ï–õ –ù–ê–•–†–ï–ù',
            '–∑–∞–º–æ–ª—á–∏': '–ó–ê–í–ê–õ–ò –ï–ë–ê–õ–û',
            '–≥–ª—É–ø—ã–π': '–¢–£–ü–û–ô –ú–£–î–ê–ö',
            '–¥—É—Ä–∞–∫': '–î–û–õ–ë–û–Å–ë',
            '–∑–ª–æ–π': '–ë–ï–®–ï–ù–´–ô',
            '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç': '–ó–ê–ï–ë–ê–õ–û'
        };

        for (const [soft, hard] of Object.entries(replacements)) {
            enhanced = enhanced.replace(new RegExp(soft, 'gi'), hard);
        }

        const angryEmoji = ['üò°', 'ü§¨', 'üí¢', 'üëø', 'üíÄ', '‚ò†Ô∏è', 'üî™'];
        if (!enhanced.includes('üò°') && !enhanced.includes('ü§¨')) {
            enhanced = `${angryEmoji[Math.floor(Math.random() * angryEmoji.length)]} ${enhanced}`;
        }

        return enhanced;
    }
}

module.exports = { CharacterAIService }; 