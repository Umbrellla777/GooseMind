const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const { MessageHandler } = require('./handlers/messageHandler');
const { MessageGenerator } = require('./services/messageGenerator');
const config = require('./config');
const PORT = process.env.PORT || 3000;

const bot = new Telegraf(config.BOT_TOKEN);
const supabase = createClient(config.SUPABASE_URL, config.SUPABASE_KEY);

const messageHandler = new MessageHandler(supabase);
const messageGenerator = new MessageGenerator(supabase);

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
let awaitingProbability = false;
let awaitingReactionProbability = false;

const startTime = Date.now();

// –î–æ–±–∞–≤—å—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
const http = require('http');
const server = http.createServer((req, res) => {
  res.writeHead(200);
  res.end('ShizAI Bot is running!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (ctx.message.text === '/shizset') {
            if (ctx.message.from.username.toLowerCase() !== 'umbrellla777') {
                return ctx.reply('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
            }

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚ö°Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞', callback_data: 'set_probability' },
                        { text: 'üòé –ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ–∞–∫—Ü–∏–π', callback_data: 'set_reaction_probability' }
                    ],
                    [
                        { text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å', callback_data: 'clear_db' }
                    ]
                ]
            };

            await ctx.reply(
                `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ShizAI:\n` +
                `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: ${config.RESPONSE_PROBABILITY}\n` +
                `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: ${config.REACTION_PROBABILITY}`,
                { reply_markup: keyboard }
            );
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if (awaitingProbability && ctx.message.from.username.toLowerCase() === 'umbrellla777') {
            const prob = parseFloat(ctx.message.text);
            if (!isNaN(prob) && prob >= 0.01 && prob <= 1) {
                config.RESPONSE_PROBABILITY = prob;
                await ctx.reply(`‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${prob}`);
                awaitingProbability = false;
                return;
            } else {
                await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.01 –¥–æ 1');
                return;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ü–∏–π
        if (awaitingReactionProbability && ctx.message.from.username.toLowerCase() === 'umbrellla777') {
            const prob = parseFloat(ctx.message.text);
            if (!isNaN(prob) && prob >= 0.01 && prob <= 1) {
                config.REACTION_PROBABILITY = prob;
                await ctx.reply(`‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${prob}`);
                awaitingReactionProbability = false;
                return;
            } else {
                await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.01 –¥–æ 1');
                return;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await messageHandler.saveMessage(ctx.message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        if (messageHandler.isBotMentioned(ctx.message.text)) {
            const response = await messageGenerator.generateResponse(ctx.message);
            await ctx.reply(response);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if (ctx.message.reply_to_message?.from?.id === ctx.botInfo.id) {
            const response = await messageGenerator.generateResponse(ctx.message);
            await ctx.reply(response);
            return;
        }
        
        // –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–µ–∞–∫—Ü–∏–π
        if (Math.random() < config.RESPONSE_PROBABILITY) {
            const response = await messageGenerator.generateResponse(ctx.message);
            await ctx.reply(response);
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
        const reactions = await messageHandler.analyzeForReaction(ctx.message);
        if (reactions) {
            try {
                await ctx.telegram.callApi('setMessageReaction', {
                    chat_id: ctx.message.chat.id,
                    message_id: ctx.message.message_id,
                    reaction: reactions.map(emoji => ({
                        type: 'emoji',
                        emoji: emoji
                    })),
                    is_big: Math.random() < 0.1 // 10% —à–∞–Ω—Å –Ω–∞ –±–æ–ª—å—à—É—é —Ä–µ–∞–∫—Ü–∏—é
                });
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
            }
        }

    } catch (error) {
        console.error('Error processing message:', error);
        if (ctx.message.from.username === 'Umbrellla777') {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
bot.action('set_probability', async (ctx) => {
    try {
        if (ctx.from.username.toLowerCase() !== 'umbrellla777') {
            return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏');
        }
        
        awaitingProbability = true;
        await ctx.answerCbQuery();
        await ctx.reply(
            'üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 0.01 –¥–æ 1).\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 0.1 - –æ—Ç–≤–µ—Ç –Ω–∞ 10% —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
            '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ' + config.RESPONSE_PROBABILITY
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

bot.action('clear_db', async (ctx) => {
    try {
        if (ctx.from.username.toLowerCase() !== 'umbrellla777') {
            return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏');
        }
        
        await messageHandler.clearDatabase();
        await ctx.answerCbQuery('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
        await ctx.reply('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ü–∏–π
bot.action('set_reaction_probability', async (ctx) => {
    try {
        if (ctx.from.username.toLowerCase() !== 'umbrellla777') {
            return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏');
        }
        
        awaitingReactionProbability = true;
        await ctx.answerCbQuery();
        await ctx.reply(
            'üòé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π (–æ—Ç 0.01 –¥–æ 1).\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 0.15 - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ 15% —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
            '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ' + config.REACTION_PROBABILITY
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ü–∏–π:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ Telegraf:', err);
    if (ctx.from?.username === 'Umbrellla777') {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: ' + err.message);
    }
});

// –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
bot.command('ping', async (ctx) => {
  const start = Date.now();
  const msg = await ctx.reply('–ü—Ä–æ–≤–µ—Ä–∫–∞...');
  const responseTime = Date.now() - start;
  
  await ctx.telegram.editMessageText(
    ctx.chat.id,
    msg.message_id,
    null,
    `üèì –ü–æ–Ω–≥!\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms\n–ê–ø—Ç–∞–π–º: ${Math.floor((Date.now() - startTime) / 1000)}s`
  );
});

// –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞–º—è—Ç–∏
setInterval(() => {
  const memory = process.memoryUsage();
  console.log(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${Math.round(memory.heapUsed / 1024 / 1024)}MB`);
  
  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
  if (memory.heapUsed > 450 * 1024 * 1024) { // 450MB
    messageGenerator.clearCache();
    console.log('–ö—ç—à –æ—á–∏—â–µ–Ω –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏');
  }
}, config.MEMORY_CHECK_INTERVAL);

// –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    await bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    console.log('–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:', config.RESPONSE_PROBABILITY);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    server.listen(PORT, () => {
      console.log(`–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
  }
}

startBot();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once('SIGINT', () => {
  bot.stop('SIGINT');
  server.close();
});
process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  server.close();
});

bot.command('status', async (ctx) => {
    const uptime = Math.floor((Date.now() - startTime) / 1000);
    const memory = process.memoryUsage();
    
    await ctx.reply(
        `üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n` +
        `–ê–ø—Ç–∞–π–º: ${uptime} —Å–µ–∫\n` +
        `–ü–∞–º—è—Ç—å: ${Math.round(memory.heapUsed / 1024 / 1024)}MB\n` +
        `–í–µ—Ä—Å–∏—è: ${require('../package.json').version}`
    );
});

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ PM2
    process.exit(1);
}); 