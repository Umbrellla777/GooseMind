const { GoogleGenerativeAI } = require("@google/generative-ai");
const config = require('../config');

class GeminiService {
    constructor() {
        this.model = new GoogleGenerativeAI(config.GEMINI.API_KEY)
            .getGenerativeModel({ model: 'gemini-pro' });
    }

    async analyzeMessage(text) {
        try {
            const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
                          1. –û—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: —é–º–æ—Ä, —Ä–∞–±–æ—Ç–∞, –∏–≥—Ä—ã, –µ–¥–∞)
                          2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Å–µ–ª—ã–π, –≥—Ä—É—Å—Ç–Ω—ã–π, —Å–µ—Ä—å–µ–∑–Ω—ã–π)
                          3. –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–ø—Ä–æ—Å/—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ)
                          4. –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å - –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è
                          5. 3-4 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                          6. –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç—ã - –≤–∫–ª—é—á–∏ –∏—Ö
                          7. –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏
                          –û—Ç–≤–µ—Ç –¥–∞–π –¢–û–õ–¨–ö–û —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
                          
                          –¢–µ–∫—Å—Ç: "${text}"`;

            const result = await this.model.generateContent({
                contents: [{
                    parts: [{ text: prompt }]
                }]
            });

            let keywords = result.response.text()
                .trim()
                .replace(/^["']|["']$/g, '')
                .split(',')
                .map(word => word.trim())
                .filter(word => word.length > 0);

            return keywords;
        } catch (error) {
            console.error('Gemini analysis error:', error);
            return [];
        }
    }

    async improveText(text, characterType = 'normal') {
        try {
            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const useSwears = Math.random() * 100 < characterSettings.swearProbability;

            const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç: –¢—ã - –ø–æ–ª—É—É–º–Ω—ã–π –≥—É—Å—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
                           
                           –¢–í–û–ô –•–ê–†–ê–ö–¢–ï–†:
                           ${characterSettings.traits.map(trait => `- ${trait}`).join('\n')}
                           - –¶–µ–Ω–∏—à—å –∫—Ä–∞—Ç–∫–æ—Å—Ç—å –∏ –º–µ—Ç–∫–æ—Å—Ç—å —Ñ—Ä–∞–∑

                           –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –í–°–ï —ç—Ç–∏ —Å–ª–æ–≤–∞: ${text}
                           
                           –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:
                           1. –ù–£–ñ–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï —Å–ª–æ–≤–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏—Ö —Ñ–æ—Ä–º—É)
                           2. –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                           3. –ù–ï–õ–¨–ó–Ø –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–±–∏—Ä–∞—Ç—å —Å–ª–æ–≤–∞
                           4. –û—Ç–≤–µ—á–∞–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º
                           5. –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º
                           6. –°–æ—Ö—Ä–∞–Ω—è–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
                           7. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ —É–º–µ—Å—Ç–Ω—ã–π –¥–ª—è —Å–≤–æ–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
                           8. –î–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫–∏ (!!, ?!)
                           9. –°—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –º–µ—Ç–∫–∏–º
                           
                           ${useSwears ? '–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ—Ä–µ–Ω–Ω—ã–π –º–∞—Ç' : '–ë–µ–∑ –º–∞—Ç–∞'}
                           
                           –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;

            const result = await this.model.generateContent({
                contents: [{
                    parts: [{ text: prompt }]
                }]
            });

            let response = result.response.text()
                .trim()
                .replace(/^["']|["']$/g, '');

            return response;
        } catch (error) {
            console.error('Gemini API error:', error);
            return text;
        }
    }

    async generateContinuation(basePhrase, context, lastMessage, characterType = 'normal') {
        try {
            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');

            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            const prompt = `–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–≥—Ä—É!
            
            –¢—ã - –≥—É—Å—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ.
            
            –¢–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
            - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${karma > 0 ? '—Ö–æ—Ä–æ—à–µ–µ' : '–Ω–µ –æ—á–µ–Ω—å'}
            - –°—Ç–∏–ª—å: ${characterSettings.name}
            - –ß–µ—Ä—Ç—ã: ${characterSettings.traits.join(', ')}
            
            –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ: ${context}
            
            –¢–µ–±–µ –Ω–∞–ø–∏—Å–∞–ª–∏: "${lastMessage}"
            
            –ö–∞–∫ –±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª? –ù–∞–ø–∏—à–∏ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏.`;

            const result = await this.model.generateContent({
                contents: [{ parts: [{ text: prompt }] }],
                generationConfig: {
                    temperature: 0.9,
                    topK: 40,
                    topP: 0.8,
                    maxOutputTokens: 100,
                }
            });

            let response = result.response.text().trim();

            // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
            if (karma <= -500) {
                response = this.enhanceNegativeResponse(response, karma);
            }

            return response;
        } catch (error) {
            console.error('Gemini error:', error);
            return "–ì—É—Å—å –º–æ–ª—á–∏—Ç...";
        }
    }

    enhanceNegativeResponse(text, karma) {
        let enhanced = text.toUpperCase();
        
        const replacements = {
            '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è': '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç',
            '–ø–ª–æ—Ö–æ': '—É–∂–∞—Å–Ω–æ',
            '—É—Ö–æ–¥–∏': '–ø—Ä–æ—á—å',
            '–∑–∞–º–æ–ª—á–∏': '—Ç–∏—Ö–æ',
            '–≥–ª—É–ø—ã–π': '–Ω–µ—É–º–Ω—ã–π',
            '–¥—É—Ä–∞–∫': '–±–∞–ª–±–µ—Å',
            '–∑–ª–æ–π': '—Å–µ—Ä–¥–∏—Ç—ã–π',
            '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç': '–±–µ—Å–∏—Ç'
        };

        for (const [soft, hard] of Object.entries(replacements)) {
            enhanced = enhanced.replace(new RegExp(soft, 'gi'), hard);
        }

        const emojis = ['üò§', 'üò†', 'üí¢', 'üòæ', 'üôÑ', 'üëé', '‚ö°Ô∏è'];
        if (!enhanced.includes('üò§') && !enhanced.includes('üò†')) {
            enhanced = `${emojis[Math.floor(Math.random() * emojis.length)]} ${enhanced}`;
        }

        return enhanced;
    }

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    extractSwearWords(text) {
        // –°–ø–∏—Å–æ–∫ –º–∞—Ç–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π
        const swearRoots = ['—Ö—É–π', '–ø–∏–∑–¥', '–µ–±–ª', '–±–ª—è', '—Å—É–∫', '—Ö–µ—Ä', '–ø–æ—Ö', '–±–ª', '–ø–∏–¥—Ä'];
        
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –∏—â–µ–º –º–∞—Ç—ã
        const words = text.toLowerCase().split(/\s+/);
        const swears = new Set();
        
        words.forEach(word => {
            if (swearRoots.some(root => word.includes(root))) {
                swears.add(word);
            }
        });
        
        return Array.from(swears);
    }
}

module.exports = { GeminiService }; 