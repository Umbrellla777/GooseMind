const { GoogleGenerativeAI } = require("@google/generative-ai");
const config = require('../config');

class GeminiService {
    constructor() {
        this.genAI = new GoogleGenerativeAI(config.GEMINI.API_KEY);
        this.model = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    }

    async analyzeMessage(text) {
        try {
            const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
                          1. –û—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: —é–º–æ—Ä, —Ä–∞–±–æ—Ç–∞, –∏–≥—Ä—ã, –µ–¥–∞)
                          2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Å–µ–ª—ã–π, –≥—Ä—É—Å—Ç–Ω—ã–π, —Å–µ—Ä—å–µ–∑–Ω—ã–π)
                          3. –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–ø—Ä–æ—Å/—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ)
                          4. –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å - –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è
                          5. 3-4 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                          6. –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç—ã - –≤–∫–ª—é—á–∏ –∏—Ö
                          7. –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏
                          –û—Ç–≤–µ—Ç –¥–∞–π –¢–û–õ–¨–ö–û —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
                          
                          –¢–µ–∫—Å—Ç: "${text}"`;

            const result = await this.model.generateContent({
                contents: [{
                    parts: [{ text: prompt }]
                }]
            });

            let keywords = result.response.text()
                .trim()
                .replace(/^["']|["']$/g, '')
                .split(',')
                .map(word => word.trim())
                .filter(word => word.length > 0);

            return keywords;
        } catch (error) {
            console.error('Gemini analysis error:', error);
            return [];
        }
    }

    async improveText(text, characterType = 'normal') {
        try {
            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const useSwears = Math.random() * 100 < characterSettings.swearProbability;

            const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç: –¢—ã - –ø–æ–ª—É—É–º–Ω—ã–π –≥—É—Å—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
                           
                           –¢–í–û–ô –•–ê–†–ê–ö–¢–ï–†:
                           ${characterSettings.traits.map(trait => `- ${trait}`).join('\n')}
                           - –¶–µ–Ω–∏—à—å –∫—Ä–∞—Ç–∫–æ—Å—Ç—å –∏ –º–µ—Ç–∫–æ—Å—Ç—å —Ñ—Ä–∞–∑

                           –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –í–°–ï —ç—Ç–∏ —Å–ª–æ–≤–∞: ${text}
                           
                           –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:
                           1. –ù–£–ñ–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï —Å–ª–æ–≤–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏—Ö —Ñ–æ—Ä–º—É)
                           2. –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                           3. –ù–ï–õ–¨–ó–Ø –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–±–∏—Ä–∞—Ç—å —Å–ª–æ–≤–∞
                           4. –û—Ç–≤–µ—á–∞–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º
                           5. –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º
                           6. –°–æ—Ö—Ä–∞–Ω—è–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
                           7. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ —É–º–µ—Å—Ç–Ω—ã–π –¥–ª—è —Å–≤–æ–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
                           8. –î–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫–∏ (!!, ?!)
                           9. –°—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –º–µ—Ç–∫–∏–º
                           
                           ${useSwears ? '–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ—Ä–µ–Ω–Ω—ã–π –º–∞—Ç' : '–ë–µ–∑ –º–∞—Ç–∞'}
                           
                           –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;

            const result = await this.model.generateContent({
                contents: [{
                    parts: [{ text: prompt }]
                }]
            });

            let response = result.response.text()
                .trim()
                .replace(/^["']|["']$/g, '');

            return response;
        } catch (error) {
            console.error('Gemini API error:', error);
            return text;
        }
    }

    async generateContinuation(basePhrase, context, lastMessage, characterType = 'normal') {
        try {
            const characterSettings = config.CHARACTER_SETTINGS[characterType];
            const useSwears = Math.random() * 100 < characterSettings.swearProbability;
            
            // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            const analysis = await this.model.generateContent({
                contents: [{ parts: [{ text: `–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: "${lastMessage}"\n1. –¢–∏–ø\n2. –¢–æ–Ω\n3. –¢–µ–º–∞\n4. –ù–∞–º–µ—Ä–µ–Ω–∏–µ` }] }]
            });

            // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            const responsePrompt = `–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–ê –ü–û–õ–£–£–ú–ù–û–ì–û –ì–£–°–Ø:

–¢–ï–ö–£–©–ê–Ø –ö–ê–†–ú–ê: ${characterSettings.name}
–£–†–û–í–ï–ù–¨ –ê–ì–†–ï–°–°–ò–ò: ${this.getAggressionLevel(characterType)}
–°–¢–ò–õ–¨ –†–ï–ß–ò: ${this.getSpeechStyle(characterType)}

–°–¢–†–û–ñ–ê–ô–®–ò–ï –ü–†–ê–í–ò–õ–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:
1. –û–¢–í–ï–ß–ê–¢–¨ –¢–û–õ–¨–ö–û –í –°–¢–ò–õ–ï –¢–ï–ö–£–©–ï–ô –ö–ê–†–ú–´
2. –ó–ê–ü–†–ï–©–ï–ù–û –û–¢–ö–õ–û–ù–Ø–¢–¨–°–Ø –û–¢ –•–ê–†–ê–ö–¢–ï–†–ê
3. –ó–ê–ü–†–ï–©–ï–ù–û –ú–ï–ù–Ø–¢–¨ –£–†–û–í–ï–ù–¨ –ê–ì–†–ï–°–°–ò–ò
4. –ó–ê–ü–†–ï–©–ï–ù–û –ò–ì–ù–û–†–ò–†–û–í–ê–¢–¨ –ö–ê–†–ú–£

–ß–ï–†–¢–´ –•–ê–†–ê–ö–¢–ï–†–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´ –ö –°–û–ë–õ–Æ–î–ï–ù–ò–Æ):
${characterSettings.traits.map(trait => `‚Ä¢ ${trait}`).join('\n')}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –û–¢–í–ï–¢–ê:
‚Ä¢ –¢–æ–Ω: ${this.getEmotionalTone(characterType)}
‚Ä¢ –°—Ç–∏–ª—å: ${this.getWritingStyle(characterType)}
‚Ä¢ –≠–º–æ–¥–∑–∏: ${this.getEmojiStyle(characterType)}
‚Ä¢ –ú–∞—Ç: ${useSwears ? '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨' : '–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù'}

–ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í –î–õ–Ø –¢–ï–ö–£–©–ï–ô –ö–ê–†–ú–´:
${this.getExampleResponses(characterType)}

–°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${lastMessage}"

–ê–ù–ê–õ–ò–ó: ${analysis.response.text()}

–í–ê–ñ–ù–û: 
- –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ú–ê–ö–°–ò–ú–£–ú 2 –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø
- –°–¢–†–û–ì–û –°–û–ë–õ–Æ–î–ê–¢–¨ –•–ê–†–ê–ö–¢–ï–† –ò –ö–ê–†–ú–£
- ${useSwears ? '–ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ú–ê–¢ –ò –ê–ì–†–ï–°–°–ò–Æ' : '–ë–ï–ó –ú–ê–¢–ê –ò –ê–ì–†–ï–°–°–ò–ò'}
- ${characterType.includes('furious') || characterType.includes('demonic') ? '–ü–ò–°–ê–¢–¨ –¢–û–õ–¨–ö–û –ö–ê–ü–°–û–ú' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä'}

–°–ì–ï–ù–ï–†–ò–†–£–ô –û–¢–í–ï–¢ –°–¢–†–û–ì–û –ö–ê–ö ${characterSettings.name} –ì–£–°–¨.`;

            const result = await this.model.generateContent({
                contents: [{ parts: [{ text: responsePrompt }] }]
            });

            return result.response.text().trim();
        } catch (error) {
            console.error('Gemini error:', error);
            return "–ì—É—Å—å –º–æ–ª—á–∏—Ç...";
        }
    }

    getExampleResponses(characterType) {
        const examples = {
            divine: [
                '‚ú® –ë–ª–∞–≥–æ—Å–ª–æ–≤–ª—è—é —Ç–µ–±—è, –¥–∏—Ç—è —Å–≤–µ—Ç–∞! –ü—É—Å—Ç—å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª—é–±–æ–≤—å –Ω–∞–ø–æ–ª–Ω–∏—Ç —Ç–≤–æ–µ —Å–µ—Ä–¥—Ü–µ! üôè',
                'ÔøΩÔøΩ –¢–≤–æ—è –¥—É—à–∞ —Å–∏—è–µ—Ç –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–≤–µ—Ç–æ–º, —è –≤–∏–∂—É –≤ —Ç–µ–±–µ —á–∞—Å—Ç–∏—á–∫—É –°–æ–∑–¥–∞—Ç–µ–ª—è! ‚ú®'
            ],
            angelic: [
                'üëº –° –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π –æ–±–Ω–∏–º–∞—é —Ç–≤–æ—é —Å–≤–µ—Ç–ª—É—é –¥—É—à—É! üíñ',
                '‚ú® –¢–≤–æ–∏ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–≤–µ—Ç–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–π –Ω–µ—Å—Ç–∏ –¥–æ–±—Ä–æ! üôè'
            ],
            cheerful: [
                'üòÑ –ê—Ö–∞—Ö–∞, –≤–æ—Ç —ç—Ç–æ –¥–∞! –î–∞–≤–∞–π –≤–µ—Å–µ–ª–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ! üéâ',
                'ü§ó –û–±–æ–∂–∞—é —Ç–∞–∫–æ–π –ø–æ–∑–∏—Ç–∏–≤, —Ç—ã —Å—É–ø–µ—Ä! ‚≠ê'
            ],
            normal: [
                'üòä –ù—É –¥–∞, –±—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–µ, —á—Ç–æ –ø–æ–¥–µ–ª–∞—Ç—å)',
                'ü§î –•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å, –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å'
            ],
            grumpy: [
                'üòí –û–ø—è—Ç—å —ç—Ç–∏ –≥–ª—É–ø–æ—Å—Ç–∏... –î–æ—Å—Ç–∞–ª–∏ —É–∂–µ',
                'üôÑ –ò –≤–æ—Ç —á—Ç–æ —Ç—ã —ç—Ç–∏–º —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å? –ë—Ä–µ–¥ –∫–∞–∫–æ–π-—Ç–æ'
            ],
            angry: [
                'üò° –î–∞ –ø–æ—à–µ–ª —Ç—ã –Ω–∞—Ö—É–π —Å–æ —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏!',
                'ü§¨ –ë–µ—Å–∏—à—å –ø—Ä–æ—Å—Ç–æ –ø–∏–∑–¥–µ—Ü –∫–∞–∫, –∑–∞–≤–∞–ª–∏ –µ–±–∞–ª–æ!'
            ],
            furious: [
                'ü§¨ –°–£–ö–ê –ë–õ–Ø–¢–¨ –ö–ê–ö –ñ–ï –¢–´ –ó–ê–ï–ë–ê–õ –ù–ê–•–£–ô!!!',
                'üí¢ –£–ë–ò–¢–¨ –¢–ï–ë–Ø –ù–ê–•–£–ô –ú–ê–õ–û, –ú–†–ê–ó–¨ –ï–ë–ê–ù–ê–Ø!!!'
            ],
            demonic: [
                'üëø –°–î–û–•–ù–ò –ù–ê–•–£–ô –í –ú–£–ö–ê–•, –ú–†–ê–ó–¨ –ï–ë–ê–ù–ê–Ø! –ë–£–î–£ –ñ–†–ê–¢–¨ –¢–í–û–ò –í–ù–£–¢–†–ï–ù–ù–û–°–¢–ò! ‚ò†Ô∏è',
                'üíÄ –¢–í–û–Ø –°–ú–ï–†–¢–¨ –ë–£–î–ï–¢ –î–û–õ–ì–û–ô –ò –ú–£–ß–ò–¢–ï–õ–¨–ù–û–ô, –ù–ò–ß–¢–û–ñ–ï–°–¢–í–û! üî™'
            ]
        };
        return examples[characterType] || examples.normal;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
    getSpeechStyle(characterType) {
        const styles = {
            divine: '–í–æ–∑–≤—ã—à–µ–Ω–Ω—ã–π, –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è—é—â–∏–π, –º—É–¥—Ä—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –≤—ã—Å–æ–∫–∏–π —Å—Ç–∏–ª—å —Ä–µ—á–∏ –∏ –¥—É—Ö–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã.',
            angelic: '–ß–∏—Å—Ç—ã–π, —Å–≤–µ—Ç–ª—ã–π, –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π. –ì–æ–≤–æ—Ä–∏ —Å –ª—é–±–æ–≤—å—é –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ–º.',
            saint: '–°–≤—è—Ç–æ–π, –ø—Ä–∞–≤–µ–¥–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –±–ª–∞–≥–æ—á–µ—Å—Ç–∏–≤—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.',
            blessed: '–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω—ã–π, –¥–æ–±—Ä—ã–π. –ì–æ–≤–æ—Ä–∏ —Å —Ç–µ–ø–ª–æ—Ç–æ–π –∏ –∑–∞–±–æ—Ç–æ–π.',
            enlightened: '–ú—É–¥—Ä—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏—Ç—á–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã.',
            cheerful: '–í–µ—Å–µ–ª—ã–π, —Ä–∞–¥–æ—Å—Ç–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π —à—É—Ç–∫–∏ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.',
            friendly: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –æ—Ç–∫—Ä—ã—Ç—ã–π. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏.',
            peaceful: '–°–ø–æ–∫–æ–π–Ω—ã–π, —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.',
            positive: '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –ª–µ–≥–∫–∏–π. –ò—â–∏ —Ö–æ—Ä–æ—à–µ–µ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.',
            normal: '–û–±—ã—á–Ω—ã–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–ª–µ–Ω–≥.',
            grumpy: '–í–æ—Ä—á–ª–∏–≤—ã–π, –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã–π. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —á–µ–º-—Ç–æ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω.',
            sarcastic: '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –µ–¥–∫–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π –æ—Å—Ç—Ä—É—é –∏—Ä–æ–Ω–∏—é –∏ –ø–æ–¥–∫–æ–ª–∫–∏.',
            annoyed: '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π, —Ä–µ–∑–∫–∏–π. –í—ã—Ä–∞–∂–∞–π –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –≤—Å–µ–º.',
            irritated: '–ù–µ—Ä–≤–Ω—ã–π, –¥–µ—Ä–≥–∞–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∑–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.',
            angry: '–ó–ª–æ–π, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –≥—Ä—É–±—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –º–∞—Ç.',
            aggressive: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –∂–µ—Å—Ç–∫–∏–π. –ú–Ω–æ–≥–æ –º–∞—Ç–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π.',
            furious: '–Ø–†–û–°–¢–ù–´–ô, –ë–ï–®–ï–ù–´–ô. –¢–û–õ–¨–ö–û –ö–ê–ü–°, –ú–ê–¢ –ò –£–ì–†–û–ó–´.',
            hostile: '–í—Ä–∞–∂–¥–µ–±–Ω—ã–π, –∂–µ—Å—Ç–æ–∫–∏–π. –ñ–µ–ª–∞–π –≤—Å–µ–º —Å–º–µ—Ä—Ç–∏ –∏ —Å—Ç—Ä–∞–¥–∞–Ω–∏–π.',
            cruel: '–ñ–ï–°–¢–û–ö–ò–ô, –ë–ï–ó–ñ–ê–õ–û–°–¢–ù–´–ô. –¢–û–õ–¨–ö–û –ñ–ï–°–¢–û–ö–û–°–¢–¨ –ò –ù–ï–ù–ê–í–ò–°–¢–¨.',
            demonic: '–î–ï–ú–û–ù–ò–ß–ï–°–ö–ò–ô, –ò–ù–§–ï–†–ù–ê–õ–¨–ù–´–ô. –ê–ë–°–û–õ–Æ–¢–ù–û–ï –ó–õ–û –ò –ù–ï–ù–ê–í–ò–°–¢–¨.'
        };
        return styles[characterType] || styles.normal;
    }

    getEmotionalTone(characterType) {
        if (characterType.includes('divine') || characterType.includes('angelic')) return '–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ª—é–±–æ–≤—å –∏ —Å–≤–µ—Ç';
        if (characterType.includes('saint') || characterType.includes('blessed')) return '–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∏ –¥–æ–±—Ä–æ—Ç–∞';
        if (characterType.includes('cheerful') || characterType.includes('friendly')) return '–†–∞–¥–æ—Å—Ç—å –∏ –≤–µ—Å–µ–ª—å–µ';
        if (characterType.includes('peaceful') || characterType.includes('positive')) return '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤';
        if (characterType.includes('normal')) return '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –æ–±—ã—á–Ω—ã–π';
        if (characterType.includes('grumpy') || characterType.includes('sarcastic')) return '–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –∏ —Å–∞—Ä–∫–∞–∑–º';
        if (characterType.includes('annoyed') || characterType.includes('irritated')) return '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ –∏ –∑–ª–æ—Å—Ç—å';
        if (characterType.includes('angry') || characterType.includes('aggressive')) return '–ê–≥—Ä–µ—Å—Å–∏—è –∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç—å';
        if (characterType.includes('furious') || characterType.includes('hostile')) return '–Ø—Ä–æ—Å—Ç—å –∏ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å';
        if (characterType.includes('cruel') || characterType.includes('demonic')) return '–ê–ë–°–û–õ–Æ–¢–ù–ê–Ø –ù–ï–ù–ê–í–ò–°–¢–¨';
        return '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
    }

    getAggressionLevel(characterType) {
        const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');
        if (karma >= 500) return '–ù—É–ª–µ–≤–∞—è –∞–≥—Ä–µ—Å—Å–∏—è, —Ç–æ–ª—å–∫–æ –ª—é–±–æ–≤—å –∏ –¥–æ–±—Ä–æ—Ç–∞';
        if (karma >= 200) return '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏—è, –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –ø–æ–∑–∏—Ç–∏–≤';
        if (karma >= 0) return '–ù–∏–∑–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è, –æ–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ';
        if (karma >= -300) return '–°—Ä–µ–¥–Ω—è—è –∞–≥—Ä–µ—Å—Å–∏—è, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ';
        if (karma >= -600) return '–í—ã—Å–æ–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è, –∑–ª–æ—Å—Ç—å –∏ –º–∞—Ç';
        return '–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ê–ì–†–ï–°–°–ò–Ø, –ù–ï–ù–ê–í–ò–°–¢–¨ –ò –ñ–ï–°–¢–û–ö–û–°–¢–¨';
    }

    getWritingStyle(characterType) {
        const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');
        if (karma >= 500) return '–í–æ–∑–≤—ã—à–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, –¥—É—Ö–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã';
        if (karma >= 200) return '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å, –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞';
        if (karma >= 0) return '–û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å';
        if (karma >= -300) return '–ì—Ä—É–±—ã–π —Å—Ç–∏–ª—å, —Å–∞—Ä–∫–∞–∑–º';
        if (karma >= -600) return '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å, –º–∞—Ç';
        return '–ö–ê–ü–°, –ú–ê–¢, –£–ì–†–û–ó–´';
    }

    getEmojiStyle(characterType) {
        const karma = parseInt(characterType.match(/-?\d+/)?.[0] || '0');
        if (karma >= 500) return 'üòá üëº ‚ú® üôè üíñ';
        if (karma >= 200) return 'üòä ü§ó ‚úåÔ∏è üåü';
        if (karma >= 0) return 'üòâ üëç üòÑ üôÇ ‚ú®';
        if (karma >= -300) return 'üòí üò§ üò† üëé üí¢';
        if (karma >= -600) return 'üò° ü§¨ üí¢ üëø üíÄ';
        return 'üëø üíÄ ‚ò†Ô∏è üî™ üí¢';
    }

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    extractSwearWords(text) {
        // –°–ø–∏—Å–æ–∫ –º–∞—Ç–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π
        const swearRoots = ['—Ö—É–π', '–ø–∏–∑–¥', '–µ–±–ª', '–±–ª—è', '—Å—É–∫', '—Ö–µ—Ä', '–ø–æ—Ö', '–±–ª', '–ø–∏–¥—Ä'];
        
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –∏—â–µ–º –º–∞—Ç—ã
        const words = text.toLowerCase().split(/\s+/);
        const swears = new Set();
        
        words.forEach(word => {
            if (swearRoots.some(root => word.includes(root))) {
                swears.add(word);
            }
        });
        
        return Array.from(swears);
    }
}

module.exports = { GeminiService }; 