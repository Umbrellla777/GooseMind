const { Telegraf, session } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const { MessageHandler } = require('./handlers/messageHandler');
const { MessageGenerator } = require('./services/messageGenerator');
const config = require('./config');
const { KarmaService } = require('./services/karmaService');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞
const botOptions = {
    telegram: {
        apiRoot: 'https://api.telegram.org',
        apiTimeout: 30000, // —É–º–µ–Ω—å—à–∏–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
        webhookReply: false
    },
    handlerTimeout: 30000 // —É–º–µ–Ω—å—à–∏–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
};

const bot = new Telegraf(config.BOT_TOKEN, botOptions);
const supabase = createClient(config.SUPABASE_URL, config.SUPABASE_KEY);

const messageHandler = new MessageHandler(supabase);
const messageGenerator = new MessageGenerator(supabase);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const karmaService = new KarmaService(supabase);

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
let awaitingProbability = false;
let awaitingReactionProbability = false;
let awaitingSwearProbability = false;

// –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let isConnected = true;
const reconnectInterval = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
const botMessages = new Map(); // –ú–µ–Ω—è–µ–º Set –Ω–∞ Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
const MESSAGE_LIMIT = 100; // –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
const MESSAGE_TTL = 24 * 60 * 60 * 1000; // –•—Ä–∞–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è 24 —á–∞—Å–∞

async function reconnect() {
    try {
        if (!isConnected) {
            console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...');
            await bot.telegram.getMe();
            isConnected = true;
            console.log('–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram');
        }
    } catch (error) {
        isConnected = false;
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error.message);
        setTimeout(reconnect, reconnectInterval);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleCallback –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async function handleCallback(ctx, action) {
    try {
        if (ctx.from.username.toLowerCase() !== 'umbrellla777') {
            await ctx.answerCbQuery('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏');
            return;
        }

        if (action.startsWith('character_')) {
            const characterType = action.replace('character_', '');
            if (config.CHARACTER_SETTINGS[characterType]) {
                config.CHARACTER_TYPE = characterType;
                await ctx.answerCbQuery(`–•–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${config.CHARACTER_SETTINGS[characterType].name}"`);
                await ctx.reply(
                    `‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä –≥—É—Å—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${config.CHARACTER_SETTINGS[characterType].name}"\n` +
                    `–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n${config.CHARACTER_SETTINGS[characterType].traits.map(t => `‚Ä¢ ${t}`).join('\n')}`
                );
            }
            return;
        }

        switch (action) {
            case 'set_probability':
                awaitingProbability = true;
                await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å');
                await ctx.reply(
                    'üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 1 –¥–æ 100%).\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 10 - –æ—Ç–≤–µ—Ç –Ω–∞ 10% —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
                    '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ' + config.RESPONSE_PROBABILITY + '%'
                );
                break;

            case 'set_reaction_probability':
                awaitingReactionProbability = true;
                await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π');
                await ctx.reply(
                    'üòé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π (–æ—Ç 1 –¥–æ 100%).\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 15 - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ 15% —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
                    '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ' + config.REACTION_PROBABILITY + '%'
                );
                break;

            case 'clear_db':
                await ctx.answerCbQuery('–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
                await messageHandler.clearDatabase();
                await ctx.reply('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');
                break;

            default:
                await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        try {
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞').catch(() => {});
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message).catch(() => {});
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e);
        }
    }
}

// –ú–∞—Å—Å–∏–≤ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é üí©
const POOP_REACTION_RESPONSES = [
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª ‚Äî —ç—Ç–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Å–∞–º—ã–π —è—Ä–∫–∏–π —Å–ª–µ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –æ—Å—Ç–∞–≤–∏—à—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.",
    "@user, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —É —Ç–µ–±—è —Å–≤–æ–µ–æ–±—Ä–∞–∑–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞, –Ω–æ, –º–æ–∂–µ—Ç, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–µ—à—å —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ?",
    "@user, —è —Ü–µ–Ω—é —Ç–≤–æ–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ, –Ω–æ, –º–æ–∂–µ—Ç, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±–æ–π–¥–µ–º—Å—è –±–µ–∑ —Ç–∞–∫–∏—Ö... —Ä–µ–∞–∫—Ü–∏–π?",
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª ‚Äî —ç—Ç–æ –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ –≤—Å–µ –ª—é–¥–∏ –æ–±–ª–∞–¥–∞—é—Ç —Ö–æ—Ä–æ—à–∏–º –≤–∫—É—Å–æ–º.",
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª ‚Äî —ç—Ç–æ –∫–∞–∫ –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ä–∞–∑–∏—Ç—å –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –æ—á–µ–Ω—å —É–¥–∞—á–Ω–∞—è.",
    "@user, —è –≤–∏–∂—É, —á—Ç–æ —Ç—ã –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞–ª—Å—è, –Ω–æ, –º–æ–∂–µ—Ç, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–µ—à—å —á—Ç–æ-—Ç–æ –º–µ–Ω–µ–µ... –±–∞–Ω–∞–ª—å–Ω–æ–µ?",
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª ‚Äî —ç—Ç–æ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Ä–∞–∑—Ä—è–¥–∞ ¬´—è —Ç–æ–∂–µ –∑–¥–µ—Å—å –±—ã–ª¬ª.",
    "@user, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π —Å–ø–æ—Å–æ–± –≤—ã—Ä–∞–∑–∏—Ç—å —Å–µ–±—è, –Ω–æ, –º–æ–∂–µ—Ç, —Ç–≤–æ–π —Å–ø–æ—Å–æ–± –Ω–µ–º–Ω–æ–≥–æ... —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω?",
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª ‚Äî —ç—Ç–æ –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ–ª–µ–∑–Ω—ã.",
    "@user, —è —Å–º–æ—Ç—Ä—é, —á—Ç–æ —Ç—ã –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∏, –Ω–æ –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ–ª–µ–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ?",
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª —ç—Ç–æ –∫–∞–∫ –ø–ª–µ–≤–æ–∫ –≤ –≤–µ—á–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∏—Ç.",
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª —ç—Ç–æ –∫–∞–∫ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.",
    "@user, —Ç–≤–æ—è ¬´–∫–∞–∫–∞—Ö–∞¬ª —ç—Ç–æ –∫–∞–∫ –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–µ–±—è, –Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –≤—Å–µ–≥–¥–∞."
];

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function cleanupOldMessages() {
    const now = Date.now();
    for (const [key, timestamp] of botMessages) {
        if (now - timestamp > MESSAGE_TTL) {
            botMessages.delete(key);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –ü–ï–†–í–´–ú –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
bot.on('message_reaction', async (ctx) => {
    try {
        const reaction = ctx.update.message_reaction;
        if (!reaction) return;

        const messageKey = `${reaction.chat.id}:${reaction.message_id}`;
        const isPoopReaction = reaction.new_reaction?.some(r => r.emoji === 'üí©');
        
        console.log('–î–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏:', {
            isPoopReaction,
            messageId: reaction.message_id,
            chatId: reaction.chat.id,
            isBotMessage: botMessages.has(messageKey),
            messagesInMemory: botMessages.size,
            reactionFromUsername: reaction.user?.username
        });

        if (isPoopReaction && botMessages.has(messageKey)) {
            const username = reaction.user?.username;
            if (username) {
                const response = POOP_REACTION_RESPONSES[
                    Math.floor(Math.random() * POOP_REACTION_RESPONSES.length)
                ].replace('@user', '@' + username);

                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ—Ç–∞:', response);
                const sentMessage = await ctx.reply(response);
                botMessages.set(`${ctx.chat.id}:${sentMessage.message_id}`, Date.now());
                
                cleanupOldMessages();
                
                if (botMessages.size > MESSAGE_LIMIT) {
                    const oldestKey = Array.from(botMessages.keys())[0];
                    botMessages.delete(oldestKey);
                }
            }
        } else {
            console.log('–†–µ–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —á–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
        if (ctx.message?.migrate_to_chat_id) {
            console.log(`Chat ${ctx.chat.id} migrated to ${ctx.message.migrate_to_chat_id}`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—É—Å—è
        if (ctx.message.text === '/gs' || ctx.message.text === '/goosemind') {
            if (ctx.message.from.username.toLowerCase() !== 'umbrellla777') {
                return ctx.reply('–¢–æ–ª—å–∫–æ @Umbrellla777 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
            }

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚ö°Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞', callback_data: 'set_probability' },
                        { text: 'üòé –ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ–∞–∫—Ü–∏–π', callback_data: 'set_reaction_probability' }
                    ],
                    [
                        { text: 'üòá –ú–∏—Ä–Ω—ã–π', callback_data: 'character_peaceful' },
                        { text: 'üòè –û–±—ã—á–Ω—ã–π', callback_data: 'character_normal' },
                    ],
                    [
                        { text: 'üòà –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π', callback_data: 'character_sarcastic' },
                        { text: 'üëø –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π', callback_data: 'character_aggressive' }
                    ],
                    [
                        { text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å', callback_data: 'clear_db' }
                    ]
                ]
            };

            await ctx.reply(
                `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–æ–ª—É–º–Ω–æ–≥–æ –ì—É—Å—è:\n` +
                `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: ${config.RESPONSE_PROBABILITY}%\n` +
                `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: ${config.REACTION_PROBABILITY}%\n` +
                `–•–∞—Ä–∞–∫—Ç–µ—Ä: ${config.CHARACTER_SETTINGS[config.CHARACTER_TYPE].name}`,
                { reply_markup: keyboard }
            );
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if (awaitingProbability && ctx.message.from.username.toLowerCase() === 'umbrellla777') {
            const prob = parseInt(ctx.message.text);
            if (!isNaN(prob) && prob >= 1 && prob <= 100) {
                config.RESPONSE_PROBABILITY = prob;
                await ctx.reply(`‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${prob}%`);
                awaitingProbability = false;
                return;
            } else {
                await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100');
                return;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ü–∏–π
        if (awaitingReactionProbability && ctx.message.from.username.toLowerCase() === 'umbrellla777') {
            const prob = parseInt(ctx.message.text);
            if (!isNaN(prob) && prob >= 1 && prob <= 100) {
                config.REACTION_PROBABILITY = prob;
                await ctx.reply(`‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${prob}%`);
                awaitingReactionProbability = false;
                return;
            } else {
                await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100');
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –º–∞—Ç–æ–≤
        if (awaitingSwearProbability && ctx.message.from.username.toLowerCase() === 'umbrellla777') {
            const prob = parseInt(ctx.message.text);
            if (!isNaN(prob) && prob >= 0 && prob <= 100) {
                config.SWEAR_PROBABILITY = prob;
                await ctx.reply(`‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${prob}%`);
                awaitingSwearProbability = false;
                return;
            } else {
                await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100');
                return;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
            const result = await messageGenerator.saveMessage(ctx.message);
            if (!result) {
                console.log('–ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
                await messageGenerator.saveMessageDirect(ctx.message);
            }
        } catch (saveError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', saveError);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        const isReplyToBot = ctx.message.reply_to_message?.from?.id === ctx.botInfo.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        const shouldRespond = isReplyToBot || 
                            messageHandler.isBotMentioned(ctx.message.text) || 
                            Math.random() * 100 < config.RESPONSE_PROBABILITY;

        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞:`, {
            isReplyToBot,
            isMentioned: messageHandler.isBotMentioned(ctx.message.text),
            probability: config.RESPONSE_PROBABILITY,
            shouldRespond
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–º—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä
        const karma = await karmaService.updateKarma(ctx.chat.id, ctx.message, ctx);
        const characterType = karmaService.getCharacterType(karma);

        if (shouldRespond) {
            console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞
            await ctx.telegram.sendChatAction(ctx.message.chat.id, 'typing');
            
            const response = await messageGenerator.generateResponse(ctx.message, characterType);
            
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ –∑–∞–≥–ª—É—à–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if (response && response !== "–ì—É—Å—å –º–æ–ª—á–∏—Ç...") {
                const sentMessage = await ctx.reply(response);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
                botMessages.set(`${ctx.chat.id}:${sentMessage.message_id}`, Date.now());
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                cleanupOldMessages();
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                if (botMessages.size > MESSAGE_LIMIT) {
                    const oldestKey = Array.from(botMessages.keys())[0];
                    botMessages.delete(oldestKey);
                }
            } else {
                console.log('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞');
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é
            if (Math.random() * 100 < config.REACTION_PROBABILITY) {
                const reactions = await messageHandler.analyzeForReaction(ctx.message);
                if (reactions && reactions.length > 0) {
                    try {
                        await ctx.telegram.callApi('setMessageReaction', {
                            chat_id: ctx.message.chat.id,
                            message_id: ctx.message.message_id,
                            reaction: reactions.map(emoji => ({
                                type: 'emoji',
                                emoji: emoji
                            })),
                            is_big: Math.random() < 0.2
                        });
                    } catch (error) {
                        console.error('Reaction error:', error);
                    }
                }
            }
        }

    } catch (error) {
        console.error('Error processing message:', error);
        if (ctx.message.from.username === 'Umbrellla777') {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –±—ã—Å—Ç—Ä—ã–º –æ—Ç–≤–µ—Ç–æ–º
bot.action('set_probability', ctx => handleCallback(ctx, 'set_probability'));
bot.action('set_reaction_probability', ctx => handleCallback(ctx, 'set_reaction_probability'));
bot.action('character_peaceful', ctx => handleCallback(ctx, 'character_peaceful'));
bot.action('character_normal', ctx => handleCallback(ctx, 'character_normal'));
bot.action('character_sarcastic', ctx => handleCallback(ctx, 'character_sarcastic'));
bot.action('character_aggressive', ctx => handleCallback(ctx, 'character_aggressive'));
bot.action('clear_db', ctx => handleCallback(ctx, 'clear_db'));

// –ò –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ Telegraf:', err.message);
    
    if (err.code === 'ETIMEDOUT' || err.code === 'ECONNRESET' || err.code === 'ETELEGRAM') {
        isConnected = false;
        reconnect();
    }
    
    if (ctx?.from?.username === 'Umbrellla777') {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: ' + err.message)
            .catch(e => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e.message));
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function startBot() {
    try {
        // –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await bot.telegram.deleteWebhook({ 
            drop_pending_updates: true 
        });

        // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        await bot.launch({
            dropPendingUpdates: true,
            allowedUpdates: [
                'message',
                'edited_message',
                'callback_query',
                'message_reaction',
                'message_reaction_count'
            ]
        });

        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        isConnected = false;
        setTimeout(startBot, reconnectInterval * 2);
    }
}

// Graceful shutdown
process.once('SIGINT', () => {
    console.log('SIGINT received, shutting down...');
    bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
    console.log('SIGTERM received, shutting down...');
    bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();